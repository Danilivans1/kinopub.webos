{"version":3,"sources":["hooks/useInViewport.ts","hooks/useUniqueId.ts","components/scrollable/scrollable.tsx","hooks/useApi.ts","components/lazy/lazy.tsx","../node_modules/react-query/es/react/useQuery.js","components/input/input.tsx","components/collectionItem/collectionItem.tsx","components/collectionsList/collectionsList.tsx","views/collections/collections.tsx"],"names":["useInViewport","target","props","options","config","disconnectOnLeave","onEnterViewport","onLeaveViewport","useState","forceUpdate","observer","useRef","inViewportRef","intersected","enterCountRef","leaveCountRef","startObserver","useCallback","current","node","findDOMNode","observe","stopObserver","unobserve","disconnect","handleIntersection","entries","entry","isIntersecting","intersectionRatio","isInViewport","initIntersectionObserver","IntersectionObserver","useEffect","inViewport","enterCount","leaveCount","useUniqueId","prefix","uid","useUID","useMemo","Footer","styled","div","ScrollableContext","createContext","Scrollable","children","onScrollToEnd","footerRef","id","value","direction","verticalScrollbar","horizontalScrollbar","Provider","ref","useApi","method","params","client","ApiClient","query","useQuery","Lazy","scrollableId","useContext","once","offset","scrollContainer","arg1","arg2","arg3","parsedOptions","parseQueryArgs","useBaseQuery","QueryObserver","Wrapper","Input","autoFocus","wrapperRef","frameId","requestAnimationFrame","querySelector","focus","cancelAnimationFrame","GridItem","GridListImageItem","CollectionItem","collection","history","useHistory","handleOnClick","push","generatePath","PATHS","Collection","collectionId","height","source","posters","medium","caption","title","onClick","CollectionsList","collections","loading","map","Array","_","idx","SearchInput","CollectionsView","setQuery","data","isLoading","handleQueryChange","placeholder","onChange","items"],"mappings":"uQA2GeA,EAnGO,SACpBC,EACAC,EACAC,GAEI,IADJC,EACG,uDADM,CAAEC,mBAAmB,GAEtBC,EAAqCJ,EAArCI,gBAAiBC,EAAoBL,EAApBK,gBADtB,EAEqBC,qBAFrB,mBAEMC,EAFN,KAIGC,EAAWC,iBAAoC,MAE/CC,EAAgBD,kBAAO,GACvBE,EAAcF,kBAAO,GAErBG,EAAgBH,iBAAO,GACvBI,EAAgBJ,iBAAO,GAEvBK,EAAgBC,uBAAY,WAChC,GAAIhB,EAAOiB,SAAWR,EAASQ,QAAS,CACtC,IAAMC,EAAOC,sBAAYnB,EAAOiB,SAC5BC,GACFT,EAASQ,QAAQG,QAAQF,MAG5B,CAAClB,EAAQS,IAENY,EAAeL,uBAAY,WAC/B,GAAIhB,EAAOiB,SAAWR,EAASQ,QAAS,CACtC,IAAMC,EAAOC,sBAAYnB,EAAOiB,SAC5BC,IACFT,EAASQ,QAAQK,UAAUJ,GAC3BT,EAASQ,QAAQM,aACjBd,EAASQ,QAAU,SAGtB,CAACjB,EAAQS,IAENe,EAAqBR,uBACzB,SAACS,GACC,IAAMC,EAAQD,EAAQ,IAAM,GACpBE,EAAsCD,EAAtCC,eAAgBC,EAAsBF,EAAtBE,kBAClBC,EAAyC,qBAAnBF,EAAiCA,EAAiBC,EAAoB,EAGlG,IAAKhB,EAAYK,SAAWY,EAU1B,OATAjB,EAAYK,SAAU,EAEP,OAAfZ,QAAe,IAAfA,OAEAQ,EAAcI,SAAW,EACzBN,EAAcM,QAAUY,OAExBrB,EAAYqB,GAMVjB,EAAYK,UAAYY,IAC1BjB,EAAYK,SAAU,EAEP,OAAfX,QAAe,IAAfA,OAEIH,EAAOC,mBAAqBK,EAASQ,SAEvCR,EAASQ,QAAQM,aAGnBT,EAAcG,SAAW,EACzBN,EAAcM,QAAUY,EAExBrB,EAAYqB,MAGhB,CAACpB,EAAUN,EAAOC,kBAAmBC,EAAiBC,IAGlDwB,EAA2Bd,uBAAY,WACtCP,EAASQ,UACZR,EAASQ,QAAU,IAAIc,qBAAqBP,EAAoBtB,MAEjE,CAACO,EAAUP,EAASsB,IAWvB,OATAQ,qBAAU,WAIR,OAHAF,IACAf,IAEO,WACLM,OAED,CAACS,EAA0Bf,EAAeM,IAEtC,CACLY,WAAYtB,EAAcM,QAC1BiB,WAAYrB,EAAcI,QAC1BkB,WAAYrB,EAAcG,U,SC7FfmB,I,EAAAA,EAPf,SAAqBC,GACnB,IAAMC,EAAMC,cAGZ,OAFWC,mBAAQ,2BAASH,EAAT,YAAmBC,KAAO,CAACD,EAAQC,K,OCElDG,EAASC,IAAOC,IAAV,6CAICC,EAAoBC,wBAA+B,IA0BjDC,EApBqB,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,cAAkB/C,EAAY,4CACvEgD,EAAYvC,iBAAuB,MACnCwC,EAAKd,EAAY,cACjBe,EAAQX,mBACZ,iBAAO,CACLU,QAEF,CAACA,IAKH,OAFAnD,EAAckD,EAAW,CAAE5C,gBAAiB2C,IAG1C,eAAC,IAAD,yBAAUE,GAAIA,EAAIE,UAAU,WAAWC,kBAAkB,SAASC,oBAAoB,UAAarD,GAAnG,cACE,cAAC2C,EAAkBW,SAAnB,CAA4BJ,MAAOA,EAAnC,SAA2CJ,IAC3C,cAACN,EAAD,CAAQe,IAAKP,U,sECFJQ,IAjBf,SACEC,GAGC,IAFDC,EAEA,uDAFmC,GACnCzD,EACA,uCACM0D,EAASpB,mBAAQ,kBAAM,IAAIqB,MAAa,IACxCC,EAAQC,YAAQ,CACnBL,GADmB,mBACRC,KACZ,kBAEEC,EAAOF,GAAP,MAAAE,EAAM,YAAYD,MACpBzD,GAGF,OAAO4D,I,uHCpBHE,EAAwB,SAAC/D,GAAW,IAC5BgE,EAAiBC,qBAAWtB,KAAhCM,GAER,OAAO,cAAC,IAAD,aAAUiB,MAAI,EAACC,OAAQ,IAAKC,gBAAiBJ,GAAY,WAAQA,IAAoBhE,KAa/E+D,S,iCCvBf,+DAIO,SAASD,EAASO,EAAMC,EAAMC,GACnC,IAAIC,EAAgBC,YAAeJ,EAAMC,EAAMC,GAC/C,OAAOG,YAAaF,EAAeG,O,wICF/BC,EAAUnC,IAAOC,IAAV,yFAsCEmC,EA1BgB,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,UAAc9E,EAAY,6BACpD+E,EAAatE,iBAA8B,MAkBjD,OAhBAsB,qBAAU,WACR,IAAIiD,EAQJ,OANIF,IACFE,EAAUC,uBAAsB,WAAO,IAAD,IACpC,UAAAF,EAAW/D,eAAX,mBAAoBkE,cAAc,gBAAlC,SAA4CC,YAIzC,WACDH,GACFI,qBAAqBJ,MAGxB,CAACD,EAAYD,IAGd,cAACF,EAAD,CAASrB,IAAKwB,EAAd,SACE,cAAC,IAAD,eAAe/E,Q,qMC5Bf4E,EAAUnC,YAAOsB,IAAPtB,CAAH,wHAOP4C,EAAW5C,YAAO6C,IAAP7C,CAAH,4CA2BC8C,EAnByB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACnCC,EAAUC,cACVC,EAAgB5E,uBAAY,YAChC,OAAIyE,QAAJ,IAAIA,OAAJ,EAAIA,EAAYvC,KACdwC,EAAQG,KACNC,YAAaC,IAAMC,WAAY,CAC7BC,aAAcR,EAAWvC,QAI9B,QAACuC,QAAD,IAACA,OAAD,EAACA,EAAYvC,GAAIwC,IAEpB,OACE,cAACb,EAAD,CAASqB,OAAO,QAAhB,SACE,cAACZ,EAAD,CAAUa,OAAM,OAAEV,QAAF,IAAEA,OAAF,EAAEA,EAAYW,QAAQC,OAAQC,QAAO,OAAEb,QAAF,IAAEA,OAAF,EAAEA,EAAYc,MAAOC,QAASZ,O,SCf1Ea,EAX0B,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACvD,OACE,eAAC,IAAD,WACGC,IAAIF,GAAa,SAACjB,GAAD,OAChB,cAAC,EAAD,CAAoCA,WAAYA,GAA3BA,EAAWvC,OAEjCyD,GAAWC,IAAI,YAAI,IAAIC,MAAM,MAAM,SAACC,EAAGC,GAAJ,OAAY,cAAC,EAAD,GAAqBA,U,kBCXrEC,EAActE,YAAOoC,IAAPpC,CAAH,oDAuBFuE,EAnBmB,WAAO,IAAD,EACZ1G,mBAAS,IADG,mBAC/BuD,EAD+B,KACxBoD,EADwB,OAEVzD,YAAO,cAAe,CAACK,EAAO,cAAlDqD,EAF8B,EAE9BA,KAAMC,EAFwB,EAExBA,UAERC,EAAoBrG,uBACxB,YAAgB,IAAbmC,EAAY,EAAZA,MACD+D,EAAS/D,KAEX,CAAC+D,IAGH,OACE,qCACE,cAACF,EAAD,CAAaM,YAAY,uGAAuBnE,MAAOW,EAAOyD,SAAUF,IACxE,cAAC,EAAD,CAAiBX,YAAW,OAAES,QAAF,IAAEA,OAAF,EAAEA,EAAMK,MAAOb,QAASS","file":"static/js/19.08ba8a57.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { findDOMNode } from 'react-dom';\n\ntype Props = {\n  onEnterViewport?: () => void;\n  onLeaveViewport?: () => void;\n};\n\nconst useInViewport = (\n  target: React.MutableRefObject<React.ReactInstance | null | undefined>,\n  props: Props,\n  options?: IntersectionObserverInit,\n  config = { disconnectOnLeave: false },\n) => {\n  const { onEnterViewport, onLeaveViewport } = props;\n  const [, forceUpdate] = useState();\n\n  const observer = useRef<IntersectionObserver | null>(null);\n\n  const inViewportRef = useRef(false);\n  const intersected = useRef(false);\n\n  const enterCountRef = useRef(0);\n  const leaveCountRef = useRef(0);\n\n  const startObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.observe(node);\n      }\n    }\n  }, [target, observer]);\n\n  const stopObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.unobserve(node);\n        observer.current.disconnect();\n        observer.current = null;\n      }\n    }\n  }, [target, observer]);\n\n  const handleIntersection = useCallback(\n    (entries) => {\n      const entry = entries[0] || {};\n      const { isIntersecting, intersectionRatio } = entry;\n      const isInViewport = typeof isIntersecting !== 'undefined' ? isIntersecting : intersectionRatio > 0;\n\n      // enter\n      if (!intersected.current && isInViewport) {\n        intersected.current = true;\n\n        onEnterViewport?.();\n\n        enterCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n\n        return;\n      }\n\n      // leave\n      if (intersected.current && !isInViewport) {\n        intersected.current = false;\n\n        onLeaveViewport?.();\n\n        if (config.disconnectOnLeave && observer.current) {\n          // disconnect obsever on leave\n          observer.current.disconnect();\n        }\n\n        leaveCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n      }\n    },\n    [observer, config.disconnectOnLeave, onEnterViewport, onLeaveViewport],\n  );\n\n  const initIntersectionObserver = useCallback(() => {\n    if (!observer.current) {\n      observer.current = new IntersectionObserver(handleIntersection, options);\n    }\n  }, [observer, options, handleIntersection]);\n\n  useEffect(() => {\n    initIntersectionObserver();\n    startObserver();\n\n    return () => {\n      stopObserver();\n    };\n  }, [initIntersectionObserver, startObserver, stopObserver]);\n\n  return {\n    inViewport: inViewportRef.current,\n    enterCount: enterCountRef.current,\n    leaveCount: leaveCountRef.current,\n  };\n};\n\nexport default useInViewport;\n","import { useMemo } from 'react';\nimport { useUID } from 'react-uid';\n\nfunction useUniqueId(prefix: string) {\n  const uid = useUID();\n  const id = useMemo(() => `${prefix}-${uid}`, [prefix, uid]);\n\n  return id;\n}\n\nexport default useUniqueId;\n","import { createContext, useMemo, useRef } from 'react';\nimport Scroller, { ScrollerProps } from '@enact/moonstone/Scroller';\nimport styled from 'styled-components';\n\nimport useInViewport from 'hooks/useInViewport';\nimport useUniqueId from 'hooks/useUniqueId';\n\nconst Footer = styled.div`\n  height: 5rem;\n`;\n\nexport const ScrollableContext = createContext<{ id?: string }>({});\n\ntype Props = {\n  onScrollToEnd?: () => void;\n} & ScrollerProps;\n\nconst Scrollable: React.FC<Props> = ({ children, onScrollToEnd, ...props }) => {\n  const footerRef = useRef<HTMLDivElement>(null);\n  const id = useUniqueId('scrollable');\n  const value = useMemo(\n    () => ({\n      id,\n    }),\n    [id],\n  );\n\n  useInViewport(footerRef, { onEnterViewport: onScrollToEnd });\n\n  return (\n    <Scroller id={id} direction=\"vertical\" verticalScrollbar=\"hidden\" horizontalScrollbar=\"hidden\" {...props}>\n      <ScrollableContext.Provider value={value}>{children}</ScrollableContext.Provider>\n      <Footer ref={footerRef} />\n    </Scroller>\n  );\n};\n\nexport default Scrollable;\n","import { useMemo } from 'react';\nimport { UseQueryOptions, useQuery } from 'react-query';\n\nimport ApiClient from 'api';\n\ntype Unpromise<T> = T extends Promise<infer U> ? U : T;\n\nexport type Methods = {\n  [method in keyof ApiClient]: ApiClient[method] extends Function ? Unpromise<ReturnType<ApiClient[method]>> : never;\n};\n\nexport type Method = keyof ApiClient & string;\n\nfunction useApi<T extends Method>(\n  method: T,\n  params: Parameters<ApiClient[T]> = [] as Parameters<ApiClient[T]>,\n  options?: UseQueryOptions<Methods[T]>,\n) {\n  const client = useMemo(() => new ApiClient(), []);\n  const query = useQuery<Methods[T]>(\n    [method, ...params],\n    () =>\n      // @ts-expect-error\n      client[method](...params) as Methods[T],\n    options,\n  );\n\n  return query;\n}\n\nexport default useApi;\n","import { useContext } from 'react';\nimport LazyLoad, { LazyLoadProps } from 'react-lazyload';\n\nimport { ScrollableContext } from 'components/scrollable';\n\ntype Props = {} & LazyLoadProps;\n\nconst Lazy: React.FC<Props> = (props) => {\n  const { id: scrollableId } = useContext(ScrollableContext);\n\n  return <LazyLoad once offset={100} scrollContainer={scrollableId && `#${scrollableId}`} {...props} />;\n};\n\nexport function withLazy(options: Props) {\n  return function WithLazy<P>(Component: React.ComponentType<P>): React.FC<P> {\n    return (props: P) => (\n      <Lazy {...options}>\n        <Component {...props} />\n      </Lazy>\n    );\n  };\n}\n\nexport default Lazy;\n","import { QueryObserver } from '../core';\nimport { parseQueryArgs } from '../core/utils';\nimport { useBaseQuery } from './useBaseQuery'; // HOOK\n\nexport function useQuery(arg1, arg2, arg3) {\n  var parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  return useBaseQuery(parsedOptions, QueryObserver);\n}","import { useEffect, useRef } from 'react';\nimport BaseInput, { InputProps } from '@enact/moonstone/Input';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  display: inline-flex;\n\n  > div {\n    width: 100%;\n  }\n`;\n\ntype Props = {\n  autoFocus?: boolean;\n} & InputProps;\n\nconst Input: React.FC<Props> = ({ autoFocus, ...props }) => {\n  const wrapperRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    let frameId: number;\n\n    if (autoFocus) {\n      frameId = requestAnimationFrame(() => {\n        wrapperRef.current?.querySelector('input')?.focus();\n      });\n    }\n\n    return () => {\n      if (frameId) {\n        cancelAnimationFrame(frameId);\n      }\n    };\n  }, [wrapperRef, autoFocus]);\n\n  return (\n    <Wrapper ref={wrapperRef}>\n      <BaseInput {...props} />\n    </Wrapper>\n  );\n};\n\nexport default Input;\n","import { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport GridListImageItem from '@enact/moonstone/GridListImageItem';\nimport styled from 'styled-components';\n\nimport { Collection } from 'api';\nimport Lazy from 'components/lazy';\nimport { PATHS, generatePath } from 'routes';\n\nconst Wrapper = styled(Lazy)`\n  display: inline-flex;\n  position: relative;\n  height: 20rem !important;\n  width: 20%;\n`;\n\nconst GridItem = styled(GridListImageItem)`\n  width: 100%;\n`;\n\ntype Props = {\n  collection?: Collection;\n};\n\nconst CollectionItem: React.FC<Props> = ({ collection }) => {\n  const history = useHistory();\n  const handleOnClick = useCallback(() => {\n    if (collection?.id) {\n      history.push(\n        generatePath(PATHS.Collection, {\n          collectionId: collection.id,\n        }),\n      );\n    }\n  }, [collection?.id, history]);\n\n  return (\n    <Wrapper height=\"20rem\">\n      <GridItem source={collection?.posters.medium} caption={collection?.title} onClick={handleOnClick} />\n    </Wrapper>\n  );\n};\n\nexport default CollectionItem;\n","import React from 'react';\nimport map from 'lodash/map';\n\nimport { Collection } from 'api';\nimport CollectionItem from 'components/collectionItem';\nimport Scrollable from 'components/scrollable';\n\ntype Props = {\n  collections?: Collection[];\n  loading?: boolean;\n};\n\nconst CollectionsList: React.FC<Props> = ({ collections, loading }) => {\n  return (\n    <Scrollable>\n      {map(collections, (collection) => (\n        <CollectionItem key={collection.id} collection={collection} />\n      ))}\n      {loading && map([...new Array(15)], (_, idx) => <CollectionItem key={idx} />)}\n    </Scrollable>\n  );\n};\n\nexport default CollectionsList;\n","import React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\n\nimport CollectionsList from 'components/collectionsList';\nimport Input from 'components/input';\nimport useApi from 'hooks/useApi';\n\nconst SearchInput = styled(Input)`\n  margin-bottom: 1rem;\n`;\n\nconst CollectionsView: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const { data, isLoading } = useApi('collections', [query, 'watchers-']);\n\n  const handleQueryChange = useCallback(\n    ({ value }) => {\n      setQuery(value);\n    },\n    [setQuery],\n  );\n\n  return (\n    <>\n      <SearchInput placeholder=\"Название подборки...\" value={query} onChange={handleQueryChange} />\n      <CollectionsList collections={data?.items} loading={isLoading} />\n    </>\n  );\n};\n\nexport default CollectionsView;\n"],"sourceRoot":""}