{"version":3,"sources":["hooks/useInViewport.ts","hooks/useUniqueId.ts","components/scrollable/scrollable.tsx","components/lazy/lazy.tsx","hooks/useInfiniteItems.ts","hooks/useApiInfinite.ts","components/input/input.tsx","components/collectionItem/collectionItem.tsx","components/collectionsList/collectionsList.tsx","containers/collectionsListInfinite/collectionsListInfinite.tsx","views/collections/collections.tsx"],"names":["useInViewport","target","props","options","config","disconnectOnLeave","onEnterViewport","onLeaveViewport","useState","forceUpdate","observer","useRef","inViewportRef","intersected","enterCountRef","leaveCountRef","startObserver","useCallback","current","node","findDOMNode","observe","stopObserver","unobserve","disconnect","handleIntersection","entries","entry","isIntersecting","intersectionRatio","isInViewport","initIntersectionObserver","IntersectionObserver","useEffect","inViewport","enterCount","leaveCount","useUniqueId","prefix","uid","useUID","useMemo","Footer","styled","div","ScrollableContext","createContext","Scrollable","children","onScrollToEnd","footerRef","id","value","direction","verticalScrollbar","horizontalScrollbar","Provider","ref","Lazy","scrollableId","useContext","once","offset","scrollContainer","useInfiniteItems","queryResult","processItems","data","isLoading","isFetchingNextPage","fetchNextPage","canFetchNextPage","setCanFetchNextPage","items","uniqBy","filter","flatMap","pages","page","processedItems","handleLoadMore","length","useApiInfinite","method","params","client","ApiClient","query","useInfiniteQuery","pageParam","getNextPageParam","lastPage","pagination","Wrapper","Input","autoFocus","wrapperRef","frameId","requestAnimationFrame","querySelector","focus","cancelAnimationFrame","GridItem","GridListImageItem","CollectionItem","collection","history","useHistory","handleOnClick","push","generatePath","PATHS","Collection","collectionId","height","source","posters","medium","caption","title","onClick","CollectionsList","collections","loading","map","Array","_","idx","CollectionsListInfinite","fetchMore","SearchInput","CollectionsView","setQuery","handleQueryChange","placeholder","onChange"],"mappings":"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","file":"static/js/19.7e917f32.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { findDOMNode } from 'react-dom';\n\ntype Props = {\n  onEnterViewport?: () => void;\n  onLeaveViewport?: () => void;\n};\n\nconst useInViewport = (\n  target: React.MutableRefObject<React.ReactInstance | null | undefined>,\n  props: Props,\n  options?: IntersectionObserverInit,\n  config = { disconnectOnLeave: false },\n) => {\n  const { onEnterViewport, onLeaveViewport } = props;\n  const [, forceUpdate] = useState();\n\n  const observer = useRef<IntersectionObserver | null>(null);\n\n  const inViewportRef = useRef(false);\n  const intersected = useRef(false);\n\n  const enterCountRef = useRef(0);\n  const leaveCountRef = useRef(0);\n\n  const startObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.observe(node);\n      }\n    }\n  }, [target, observer]);\n\n  const stopObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.unobserve(node);\n        observer.current.disconnect();\n        observer.current = null;\n      }\n    }\n  }, [target, observer]);\n\n  const handleIntersection = useCallback(\n    (entries) => {\n      const entry = entries[0] || {};\n      const { isIntersecting, intersectionRatio } = entry;\n      const isInViewport = typeof isIntersecting !== 'undefined' ? isIntersecting : intersectionRatio > 0;\n\n      // enter\n      if (!intersected.current && isInViewport) {\n        intersected.current = true;\n\n        onEnterViewport?.();\n\n        enterCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n\n        return;\n      }\n\n      // leave\n      if (intersected.current && !isInViewport) {\n        intersected.current = false;\n\n        onLeaveViewport?.();\n\n        if (config.disconnectOnLeave && observer.current) {\n          // disconnect obsever on leave\n          observer.current.disconnect();\n        }\n\n        leaveCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n      }\n    },\n    [observer, config.disconnectOnLeave, onEnterViewport, onLeaveViewport],\n  );\n\n  const initIntersectionObserver = useCallback(() => {\n    if (!observer.current) {\n      observer.current = new IntersectionObserver(handleIntersection, options);\n    }\n  }, [observer, options, handleIntersection]);\n\n  useEffect(() => {\n    initIntersectionObserver();\n    startObserver();\n\n    return () => {\n      stopObserver();\n    };\n  }, [initIntersectionObserver, startObserver, stopObserver]);\n\n  return {\n    inViewport: inViewportRef.current,\n    enterCount: enterCountRef.current,\n    leaveCount: leaveCountRef.current,\n  };\n};\n\nexport default useInViewport;\n","import { useMemo } from 'react';\nimport { useUID } from 'react-uid';\n\nfunction useUniqueId(prefix: string) {\n  const uid = useUID();\n  const id = useMemo(() => `${prefix}-${uid}`, [prefix, uid]);\n\n  return id;\n}\n\nexport default useUniqueId;\n","import { createContext, useMemo, useRef } from 'react';\nimport Scroller, { ScrollerProps } from '@enact/moonstone/Scroller';\nimport styled from 'styled-components';\n\nimport useInViewport from 'hooks/useInViewport';\nimport useUniqueId from 'hooks/useUniqueId';\n\nconst Footer = styled.div`\n  height: 5rem;\n`;\n\nexport const ScrollableContext = createContext<{ id?: string }>({});\n\ntype Props = {\n  onScrollToEnd?: () => void;\n} & ScrollerProps;\n\nconst Scrollable: React.FC<Props> = ({ children, onScrollToEnd, ...props }) => {\n  const footerRef = useRef<HTMLDivElement>(null);\n  const id = useUniqueId('scrollable');\n  const value = useMemo(\n    () => ({\n      id,\n    }),\n    [id],\n  );\n\n  useInViewport(footerRef, { onEnterViewport: onScrollToEnd });\n\n  return (\n    <Scroller id={id} direction=\"vertical\" verticalScrollbar=\"hidden\" horizontalScrollbar=\"hidden\" {...props}>\n      <ScrollableContext.Provider value={value}>{children}</ScrollableContext.Provider>\n      <Footer ref={footerRef} />\n    </Scroller>\n  );\n};\n\nexport default Scrollable;\n","import { useContext } from 'react';\nimport LazyLoad, { LazyLoadProps } from 'react-lazyload';\n\nimport { ScrollableContext } from 'components/scrollable';\n\ntype Props = {} & LazyLoadProps;\n\nconst Lazy: React.FC<Props> = (props) => {\n  const { id: scrollableId } = useContext(ScrollableContext);\n\n  return <LazyLoad once offset={100} scrollContainer={scrollableId && `#${scrollableId}`} {...props} />;\n};\n\nexport function withLazy(options: Props) {\n  return function WithLazy<P>(Component: React.ComponentType<P>): React.FC<P> {\n    return (props: P) => (\n      <Lazy {...options}>\n        <Component {...props} />\n      </Lazy>\n    );\n  };\n}\n\nexport default Lazy;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport filter from 'lodash/filter';\nimport flatMap from 'lodash/flatMap';\nimport uniqBy from 'lodash/uniqBy';\n\nimport useApiInfinite from 'hooks/useApiInfinite';\n\ntype PageWithItems<T> = {\n  items: T[];\n};\n\nexport type QueryResult = ReturnType<typeof useApiInfinite>;\n\nfunction useInfiniteItems<T>(queryResult: QueryResult, processItems?: (items: T[]) => T[]) {\n  const { data, isLoading, isFetchingNextPage, fetchNextPage } = queryResult;\n  const [canFetchNextPage, setCanFetchNextPage] = useState(false);\n\n  const items = useMemo(\n    () => uniqBy(filter(flatMap<PageWithItems<T>, T>((data?.pages as unknown) as PageWithItems<T>[], (page) => page.items)), 'id'),\n    [data?.pages],\n  );\n  const processedItems = useMemo(() => (processItems ? processItems(items) : items), [items, processItems]);\n\n  const handleLoadMore = useCallback(() => {\n    if (canFetchNextPage) {\n      fetchNextPage();\n      setCanFetchNextPage(false);\n    }\n  }, [canFetchNextPage, fetchNextPage]);\n\n  useEffect(() => {\n    setCanFetchNextPage(true);\n  }, [items.length]);\n\n  return [processedItems, isLoading || isFetchingNextPage, handleLoadMore] as const;\n}\n\nexport default useInfiniteItems;\n","import { useMemo } from 'react';\nimport { UseInfiniteQueryOptions, useInfiniteQuery } from 'react-query';\n\nimport ApiClient, { PaginationResponse } from 'api';\n\nimport { Method, Methods } from './useApi';\n\nfunction useApiInfinite<T extends Method>(\n  method: T,\n  params: Parameters<ApiClient[T]> = [] as Parameters<ApiClient[T]>,\n  options?: UseInfiniteQueryOptions<Methods[T]>,\n) {\n  const client = useMemo(() => new ApiClient(), []);\n  const query = useInfiniteQuery<Methods[T], string, Methods[T]>(\n    [method, ...params],\n    ({ pageParam }) => {\n      // @ts-expect-error\n      return client[method](...params, pageParam) as Methods[T];\n    },\n    {\n      // @ts-expect-error\n      getNextPageParam: (lastPage: PaginationResponse) => {\n        return lastPage?.pagination?.current + 1 || 1;\n      },\n      ...options,\n    },\n  );\n\n  return query;\n}\n\nexport default useApiInfinite;\n","import { useEffect, useRef } from 'react';\nimport BaseInput, { InputProps } from '@enact/moonstone/Input';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  display: inline-flex;\n\n  > div {\n    width: 100%;\n  }\n`;\n\ntype Props = {\n  autoFocus?: boolean;\n} & InputProps;\n\nconst Input: React.FC<Props> = ({ autoFocus, ...props }) => {\n  const wrapperRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    let frameId: number;\n\n    if (autoFocus) {\n      frameId = requestAnimationFrame(() => {\n        wrapperRef.current?.querySelector('input')?.focus();\n      });\n    }\n\n    return () => {\n      if (frameId) {\n        cancelAnimationFrame(frameId);\n      }\n    };\n  }, [wrapperRef, autoFocus]);\n\n  return (\n    <Wrapper ref={wrapperRef}>\n      <BaseInput {...props} />\n    </Wrapper>\n  );\n};\n\nexport default Input;\n","import { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport GridListImageItem from '@enact/moonstone/GridListImageItem';\nimport styled from 'styled-components';\n\nimport { Collection } from 'api';\nimport Lazy from 'components/lazy';\nimport { PATHS, generatePath } from 'routes';\n\nconst Wrapper = styled(Lazy)`\n  display: inline-flex;\n  position: relative;\n  height: 20rem !important;\n  width: 20%;\n`;\n\nconst GridItem = styled(GridListImageItem)`\n  width: 100%;\n`;\n\ntype Props = {\n  collection?: Collection;\n};\n\nconst CollectionItem: React.FC<Props> = ({ collection }) => {\n  const history = useHistory();\n  const handleOnClick = useCallback(() => {\n    if (collection?.id) {\n      history.push(\n        generatePath(PATHS.Collection, {\n          collectionId: collection.id,\n        }),\n      );\n    }\n  }, [collection?.id, history]);\n\n  return (\n    <Wrapper height=\"20rem\">\n      <GridItem source={collection?.posters.medium} caption={collection?.title} onClick={handleOnClick} />\n    </Wrapper>\n  );\n};\n\nexport default CollectionItem;\n","import React from 'react';\nimport map from 'lodash/map';\n\nimport { Collection } from 'api';\nimport CollectionItem from 'components/collectionItem';\nimport Scrollable from 'components/scrollable';\n\ntype Props = {\n  collections?: Collection[];\n  loading?: boolean;\n  onScrollToEnd?: () => void;\n};\n\nconst CollectionsList: React.FC<Props> = ({ collections, loading, onScrollToEnd }) => {\n  return (\n    <Scrollable onScrollToEnd={onScrollToEnd}>\n      {map(collections, (collection) => (\n        <CollectionItem key={collection.id} collection={collection} />\n      ))}\n      {loading && map([...new Array(15)], (_, idx) => <CollectionItem key={idx} />)}\n    </Scrollable>\n  );\n};\n\nexport default CollectionsList;\n","import { Collection } from 'api';\nimport CollectionsList from 'components/collectionsList';\nimport useInfiniteItems, { QueryResult } from 'hooks/useInfiniteItems';\n\ntype Props = {\n  queryResult: QueryResult;\n  processItems?: (items: Collection[]) => Collection[];\n};\n\nconst CollectionsListInfinite: React.FC<Props> = ({ queryResult, processItems }) => {\n  const [items, isLoading, fetchMore] = useInfiniteItems(queryResult, processItems);\n\n  return <CollectionsList collections={items} loading={isLoading} onScrollToEnd={fetchMore} />;\n};\n\nexport default CollectionsListInfinite;\n","import React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\n\nimport Input from 'components/input';\nimport CollectionsListInfinite from 'containers/collectionsListInfinite';\nimport useApiInfinite from 'hooks/useApiInfinite';\n\nconst SearchInput = styled(Input)`\n  margin-bottom: 1rem;\n`;\n\nconst CollectionsView: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const queryResult = useApiInfinite('collections', [query, 'watchers-']);\n\n  const handleQueryChange = useCallback(\n    ({ value }) => {\n      setQuery(value);\n    },\n    [setQuery],\n  );\n\n  return (\n    <>\n      <SearchInput placeholder=\"Название подборки...\" value={query} onChange={handleQueryChange} />\n      <CollectionsListInfinite queryResult={queryResult} />\n    </>\n  );\n};\n\nexport default CollectionsView;\n"],"sourceRoot":""}