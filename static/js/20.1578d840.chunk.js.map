{"version":3,"sources":["views/genre/genre.tsx","components/seo/seo.tsx","hooks/useInViewport.ts","components/scrollable/scrollable.tsx","components/title/title.tsx","components/imageItem/imageItem.tsx","components/videoItem/videoItem.tsx","components/itemsList/itemsList.tsx","hooks/useInfiniteItems.ts","hooks/useApiInfinite.ts","containers/itemsListInfinite/itemsListInfinite.tsx"],"names":["GENDER_ID_MAP","GenreView","genreId","useParams","useLocation","state","params","title","getGenreById","queryResult","useApiInfinite","genre","Seo","props","Helmet","defaultTitle","titleTemplate","useInViewport","target","options","config","disconnectOnLeave","onEnterViewport","onLeaveViewport","useState","forceUpdate","observer","useRef","inViewportRef","intersected","enterCountRef","leaveCountRef","startObserver","useCallback","current","node","findDOMNode","observe","stopObserver","unobserve","disconnect","handleIntersection","entries","entry","isIntersecting","intersectionRatio","isInViewport","initIntersectionObserver","IntersectionObserver","useEffect","inViewport","enterCount","leaveCount","Scrollable","children","className","onScrollToEnd","footerRef","cx","ref","Title","ImageItem","wrapperClassName","source","caption","loading","src","alt","VideoItem","item","history","useHistory","useMemo","split","handleOnClick","id","push","generatePath","PATHS","Item","itemId","onClick","posters","medium","new","ItemsList","items","scrollable","content","map","Array","_","idx","useInfiniteItems","processItems","data","isLoading","isFetchingNextPage","fetchNextPage","canFetchNextPage","setCanFetchNextPage","uniqBy","filter","flatMap","pages","page","processedItems","handleLoadMore","length","method","client","ApiClient","query","useInfiniteQuery","pageParam","getNextPageParam","lastPage","pagination","ItemsListInfinite","fetchMore"],"mappings":"6NAQMA,EAAgB,CACpB,GAAI,qEACJ,GAAI,kCAgCSC,EApBa,WAC1B,IAAQC,EAAYC,cAAZD,QAER,EADiBE,cAC0CC,OAAS,GAA5DC,EAAR,EAAQA,OAAR,IAAgBC,aAAhB,MAZmB,SAACL,GACpB,OACGA,EAEGF,EAAcE,GACdA,IAAY,GAOMM,CAAaN,GAArC,EAEMO,EAAcC,YAAe,QAAS,CAAC,2BAEtCJ,GAFqC,IAGxCK,MAAOT,MAIX,OACE,qCACE,cAAC,IAAD,CAAKK,MAAOA,IACZ,cAAC,IAAD,CAAmBA,MAAOA,EAAOE,YAAaA,S,+FC7BrCG,EAJc,SAACC,GAC5B,OAAO,cAACC,EAAA,EAAD,aAAQC,aAAa,UAAUC,cAAc,sBAAyBH,M,gICsGhEI,EAnGO,SACpBC,EACAL,EACAM,GAEI,IADJC,EACG,uDADM,CAAEC,mBAAmB,GAEtBC,EAAqCT,EAArCS,gBAAiBC,EAAoBV,EAApBU,gBACzB,EAAwBC,qBAAxB,mBAASC,EAAT,KAEMC,EAAWC,iBAAoC,MAE/CC,EAAgBD,kBAAO,GACvBE,EAAcF,kBAAO,GAErBG,EAAgBH,iBAAO,GACvBI,EAAgBJ,iBAAO,GAEvBK,EAAgBC,uBAAY,WAChC,GAAIf,EAAOgB,SAAWR,EAASQ,QAAS,CACtC,IAAMC,EAAOC,sBAAYlB,EAAOgB,SAC5BC,GACFT,EAASQ,QAAQG,QAAQF,MAG5B,CAACjB,EAAQQ,IAENY,EAAeL,uBAAY,WAC/B,GAAIf,EAAOgB,SAAWR,EAASQ,QAAS,CACtC,IAAMC,EAAOC,sBAAYlB,EAAOgB,SAC5BC,IACFT,EAASQ,QAAQK,UAAUJ,GAC3BT,EAASQ,QAAQM,aACjBd,EAASQ,QAAU,SAGtB,CAAChB,EAAQQ,IAENe,EAAqBR,uBACzB,SAACS,GACC,IAAMC,EAAQD,EAAQ,IAAM,GACpBE,EAAsCD,EAAtCC,eAAgBC,EAAsBF,EAAtBE,kBAClBC,EAAyC,qBAAnBF,EAAiCA,EAAiBC,EAAoB,EAGlG,IAAKhB,EAAYK,SAAWY,EAU1B,OATAjB,EAAYK,SAAU,EAEP,OAAfZ,QAAe,IAAfA,OAEAQ,EAAcI,SAAW,EACzBN,EAAcM,QAAUY,OAExBrB,EAAYqB,GAMVjB,EAAYK,UAAYY,IAC1BjB,EAAYK,SAAU,EAEP,OAAfX,QAAe,IAAfA,OAEIH,EAAOC,mBAAqBK,EAASQ,SAEvCR,EAASQ,QAAQM,aAGnBT,EAAcG,SAAW,EACzBN,EAAcM,QAAUY,EAExBrB,EAAYqB,MAGhB,CAACpB,EAAUN,EAAOC,kBAAmBC,EAAiBC,IAGlDwB,EAA2Bd,uBAAY,WACtCP,EAASQ,UACZR,EAASQ,QAAU,IAAIc,qBAAqBP,EAAoBtB,MAEjE,CAACO,EAAUP,EAASsB,IAWvB,OATAQ,qBAAU,WAIR,OAHAF,IACAf,IAEO,WACLM,OAED,CAACS,EAA0Bf,EAAeM,IAEtC,CACLY,WAAYtB,EAAcM,QAC1BiB,WAAYrB,EAAcI,QAC1BkB,WAAYrB,EAAcG,U,kDChFfmB,EAbqB,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,cAAkB3C,EAAY,iBAClF4C,EAAY9B,iBAAuB,MAIzC,OAFAV,EAAcwC,EAAW,CAAEnC,gBAAiBkC,IAG1C,8CAAKD,UAAWG,IAAG,yBAA0BH,IAAgB1C,GAA7D,cACGyC,EACD,qBAAKC,UAAU,OAAOI,IAAKF,U,gJCElBG,EAZgB,SAAC,GAAoC,IAAlCrD,EAAiC,EAAjCA,MAAOgD,EAA0B,EAA1BA,UAAc1C,EAAY,iBACjE,OAAKN,EAKH,cAAC,IAAD,2BAAUM,GAAV,IAAiB0C,UAAWG,IAAG,WAAYH,GAA3C,SACGhD,KALI,O,yLCqBIsD,EApBoB,SAAC,GAA0E,IAAxEN,EAAuE,EAAvEA,UAAWO,EAA4D,EAA5DA,iBAAkBC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,QAASV,EAAyB,EAAzBA,SAAazC,EAAY,iBAC3G,OACE,cAAC,IAAD,2BAAeA,GAAf,IAAsB0C,UAAWG,IAAG,mBAAoBI,GAAxD,SACE,sBAAKP,UAAWG,IAAG,iEAAkEH,GAArF,UACE,qBACEU,QAAQ,OACRV,UAAU,6EACVW,IAAKH,EACLI,IAAKH,IAEP,qBAAKT,UAAU,OAAf,SACE,mBAAGA,UAAU,sEAAb,SAAoFS,MAGrFV,U,2KCaMc,EAzBoB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMd,EAAgB,EAAhBA,UACpCe,EAAUC,cACVhE,EAAQiE,mBAAQ,+BAAMH,QAAN,IAAMA,GAAN,UAAMA,EAAM9D,aAAZ,aAAM,EAAakE,MAAM,KAAK,KAAI,QAACJ,QAAD,IAACA,OAAD,EAACA,EAAM9D,QAEzDmE,EAAgBzC,uBAAY,YAChC,OAAIoC,QAAJ,IAAIA,OAAJ,EAAIA,EAAMM,KACRL,EAAQM,KACNC,YAAaC,IAAMC,KAAM,CACvBC,OAAQX,EAAKM,QAIlB,QAACN,QAAD,IAACA,OAAD,EAACA,EAAMM,GAAIL,IAEd,OACE,cAAC,IAAD,CAAWW,QAASP,EAAeX,OAAM,OAAEM,QAAF,IAAEA,OAAF,EAAEA,EAAMa,QAAQC,OAAQnB,QAASzD,EAAOgD,UAAWG,IAAG,OAAQH,GAAvG,UACO,OAAJc,QAAI,IAAJA,OAAA,EAAAA,EAAMe,MACL,qBAAK7B,UAAU,2HAAf,gBACGc,QADH,IACGA,OADH,EACGA,EAAMe,SCGFC,EAhBoB,SAAC,GAA4E,IAA1E9E,EAAyE,EAAzEA,MAAO+E,EAAkE,EAAlEA,MAAOrB,EAA2D,EAA3DA,QAAST,EAAkD,EAAlDA,cAAkD,IAAnC+B,kBAAmC,SAAhBhC,EAAgB,EAAhBA,UACvFiC,EACJ,gCACE,cAAC,IAAD,CAAOjF,MAAOA,IACd,sBAAKgD,UAAWG,IAAG,iBAAkBH,GAArC,UACGkC,IAAIH,GAAO,SAACjB,GAAD,OACV,cAAC,EAAD,CAAyBA,KAAMA,GAAfA,EAAKM,OAEtBV,GAAWwB,IAAI,YAAI,IAAIC,MAAM,MAAM,SAACC,EAAGC,GAAJ,OAAY,cAAC,EAAD,GAAgBA,YAKtE,OAAOL,EAAa,cAAC,IAAD,CAAY/B,cAAeA,EAA3B,SAA2CgC,IAAwBA,I,0GCM1EK,IAxBf,SAA6BpF,EAA0BqF,GACrD,IAAQC,EAAuDtF,EAAvDsF,KAAMC,EAAiDvF,EAAjDuF,UAAWC,EAAsCxF,EAAtCwF,mBAAoBC,EAAkBzF,EAAlByF,cAC7C,EAAgD1E,oBAAS,GAAzD,mBAAO2E,EAAP,KAAyBC,EAAzB,KAEMd,EAAQd,mBACZ,kBAAM6B,IAAOC,IAAOC,IAAO,OAAsBR,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAMS,OAAwC,SAACC,GAAD,OAAUA,EAAKnB,UAAS,QACvH,QAACS,QAAD,IAACA,OAAD,EAACA,EAAMS,QAEHE,EAAiBlC,mBAAQ,kBAAOsB,EAAeA,EAAaR,GAASA,IAAQ,CAACA,EAAOQ,IAErFa,EAAiB1E,uBAAY,WAC7BkE,IACFD,IACAE,GAAoB,MAErB,CAACD,EAAkBD,IAMtB,OAJAjD,qBAAU,WACRmD,GAAoB,KACnB,CAACd,EAAMsB,SAEH,CAACF,EAAgBV,GAAaC,EAAoBU,K,+ECH5CjG,IAxBf,SACEmG,GAGC,IAFDvG,EAEA,uDAFmC,GACnCa,EACA,uCACM2F,EAAStC,mBAAQ,kBAAM,IAAIuC,MAAa,IACxCC,EAAQC,YAAgB,CAC3BJ,GAD2B,mBAChBvG,KACZ,YAAoB,IAAjB4G,EAAgB,EAAhBA,UAED,OAAOJ,EAAOD,GAAP,MAAAC,EAAM,YAAYxG,GAAZ,QAAoB4G,OAJP,aAQ1BC,iBAAkB,SAACC,GAAkC,IAAD,EAClD,OAAe,OAARA,QAAQ,IAARA,GAAA,UAAAA,EAAUC,kBAAV,eAAsBnF,SAAU,GAAK,IAE3Cf,IAIP,OAAO6F,I,wGCZMM,EAN4B,SAAC,GAA0C,IAAxC/G,EAAuC,EAAvCA,MAAOE,EAAgC,EAAhCA,YAAaqF,EAAmB,EAAnBA,aAChE,EAAsCD,YAAiBpF,EAAaqF,GAApE,mBAAOR,EAAP,KAAcU,EAAd,KAAyBuB,EAAzB,KAEA,OAAO,cAAC,IAAD,CAAWhH,MAAOA,EAAO+E,MAAOA,EAAOrB,QAAS+B,EAAWxC,cAAe+D","file":"static/js/20.1578d840.chunk.js","sourcesContent":["import { useLocation, useParams } from 'react-router-dom';\n\nimport { ItemsParams } from 'api';\nimport Seo from 'components/seo';\nimport ItemsListInfinite from 'containers/itemsListInfinite';\nimport useApiInfinite from 'hooks/useApiInfinite';\nimport { RouteParams } from 'routes';\n\nconst GENDER_ID_MAP = {\n  23: 'Мультфильмы',\n  25: 'Аниме',\n} as const;\n\nconst getGenreById = (genreId?: string) => {\n  return (\n    (genreId\n      ? // @ts-expect-error\n        GENDER_ID_MAP[genreId]\n      : genreId) || ''\n  );\n};\n\nconst GenreView: React.FC = () => {\n  const { genreId } = useParams<RouteParams>();\n  const location = useLocation<{ params?: ItemsParams; title?: string }>();\n  const { params, title = getGenreById(genreId) } = location.state || {};\n\n  const queryResult = useApiInfinite('items', [\n    {\n      ...params,\n      genre: genreId,\n    },\n  ]);\n\n  return (\n    <>\n      <Seo title={title} />\n      <ItemsListInfinite title={title} queryResult={queryResult} />\n    </>\n  );\n};\n\nexport default GenreView;\n","import { Helmet, HelmetProps } from 'react-helmet';\n\ntype Props = {} & HelmetProps;\n\nconst Seo: React.FC<Props> = (props) => {\n  return <Helmet defaultTitle=\"Unknown\" titleTemplate=\"%s | Kinopub WebOS\" {...props} />;\n};\n\nexport default Seo;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { findDOMNode } from 'react-dom';\n\ntype Props = {\n  onEnterViewport?: () => void;\n  onLeaveViewport?: () => void;\n};\n\nconst useInViewport = (\n  target: React.MutableRefObject<React.ReactInstance | null | undefined>,\n  props: Props,\n  options?: IntersectionObserverInit,\n  config = { disconnectOnLeave: false },\n) => {\n  const { onEnterViewport, onLeaveViewport } = props;\n  const [, forceUpdate] = useState();\n\n  const observer = useRef<IntersectionObserver | null>(null);\n\n  const inViewportRef = useRef(false);\n  const intersected = useRef(false);\n\n  const enterCountRef = useRef(0);\n  const leaveCountRef = useRef(0);\n\n  const startObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.observe(node);\n      }\n    }\n  }, [target, observer]);\n\n  const stopObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.unobserve(node);\n        observer.current.disconnect();\n        observer.current = null;\n      }\n    }\n  }, [target, observer]);\n\n  const handleIntersection = useCallback(\n    (entries) => {\n      const entry = entries[0] || {};\n      const { isIntersecting, intersectionRatio } = entry;\n      const isInViewport = typeof isIntersecting !== 'undefined' ? isIntersecting : intersectionRatio > 0;\n\n      // enter\n      if (!intersected.current && isInViewport) {\n        intersected.current = true;\n\n        onEnterViewport?.();\n\n        enterCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n\n        return;\n      }\n\n      // leave\n      if (intersected.current && !isInViewport) {\n        intersected.current = false;\n\n        onLeaveViewport?.();\n\n        if (config.disconnectOnLeave && observer.current) {\n          // disconnect obsever on leave\n          observer.current.disconnect();\n        }\n\n        leaveCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n      }\n    },\n    [observer, config.disconnectOnLeave, onEnterViewport, onLeaveViewport],\n  );\n\n  const initIntersectionObserver = useCallback(() => {\n    if (!observer.current) {\n      observer.current = new IntersectionObserver(handleIntersection, options);\n    }\n  }, [observer, options, handleIntersection]);\n\n  useEffect(() => {\n    initIntersectionObserver();\n    startObserver();\n\n    return () => {\n      stopObserver();\n    };\n  }, [initIntersectionObserver, startObserver, stopObserver]);\n\n  return {\n    inViewport: inViewportRef.current,\n    enterCount: enterCountRef.current,\n    leaveCount: leaveCountRef.current,\n  };\n};\n\nexport default useInViewport;\n","import { useRef } from 'react';\nimport cx from 'classnames';\n\nimport useInViewport from 'hooks/useInViewport';\n\ntype Props = {\n  onScrollToEnd?: () => void;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst Scrollable: React.FC<Props> = ({ children, className, onScrollToEnd, ...props }) => {\n  const footerRef = useRef<HTMLDivElement>(null);\n\n  useInViewport(footerRef, { onEnterViewport: onScrollToEnd });\n\n  return (\n    <div className={cx('overflow-y-auto h-full', className)} {...props}>\n      {children}\n      <div className=\"h-40\" ref={footerRef} />\n    </div>\n  );\n};\n\nexport default Scrollable;\n","import cx from 'classnames';\n\nimport Text from 'components/text';\n\ntype Props = {\n  title?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst Title: React.FC<Props> = ({ title, className, ...props }) => {\n  if (!title) {\n    return null;\n  }\n\n  return (\n    <Text {...props} className={cx('m-1 mb-3', className)}>\n      {title}\n    </Text>\n  );\n};\n\nexport default Title;\n","import cx from 'classnames';\n\nimport Spottable from 'components/spottable';\n\ntype Props = {\n  className?: string;\n  wrapperClassName?: string;\n  source?: string;\n  caption?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst ImageItem: React.FC<Props> = ({ className, wrapperClassName, source, caption, children, ...props }) => {\n  return (\n    <Spottable {...props} className={cx('rounded-xl w-1/5', wrapperClassName)}>\n      <div className={cx('h-40 m-1 flex flex-col relative overflow-hidden cursor-pointer', className)}>\n        <img\n          loading=\"lazy\"\n          className=\"w-full h-full object-cover rounded-xl border-2 border-gray-300 bg-gray-300\"\n          src={source}\n          alt={caption}\n        />\n        <div className=\"px-2\">\n          <p className=\"text-gray-200 text-sm text-center overflow-hidden whitespace-nowrap\">{caption}</p>\n        </div>\n\n        {children}\n      </div>\n    </Spottable>\n  );\n};\n\nexport default ImageItem;\n","import { useCallback, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport cx from 'classnames';\n\nimport { Item } from 'api';\nimport ImageItem from 'components/imageItem';\nimport { PATHS, generatePath } from 'routes';\n\ntype Props = {\n  item?: Item;\n  className?: string;\n};\n\nconst VideoItem: React.FC<Props> = ({ item, className }) => {\n  const history = useHistory();\n  const title = useMemo(() => item?.title?.split('/')[0], [item?.title]);\n\n  const handleOnClick = useCallback(() => {\n    if (item?.id) {\n      history.push(\n        generatePath(PATHS.Item, {\n          itemId: item.id,\n        }),\n      );\n    }\n  }, [item?.id, history]);\n\n  return (\n    <ImageItem onClick={handleOnClick} source={item?.posters.medium} caption={title} className={cx('h-72', className)}>\n      {item?.new && (\n        <div className=\"absolute bg-red-600 border-gray-300 border-t-2 border-r-2 text-gray-200 px-2 py-1 rounded-bl rounded-tr-xl top-0 right-0\">\n          {item?.new}\n        </div>\n      )}\n    </ImageItem>\n  );\n};\n\nexport default VideoItem;\n","import React from 'react';\nimport cx from 'classnames';\nimport map from 'lodash/map';\n\nimport { Item } from 'api';\nimport Scrollable from 'components/scrollable';\nimport Title from 'components/title';\nimport VideoItem from 'components/videoItem';\n\ntype Props = {\n  title?: string;\n  items?: Item[];\n  loading?: boolean;\n  onScrollToEnd?: () => void;\n  scrollable?: boolean;\n  className?: string;\n};\n\nconst ItemsList: React.FC<Props> = ({ title, items, loading, onScrollToEnd, scrollable = true, className }) => {\n  const content = (\n    <div>\n      <Title title={title} />\n      <div className={cx('flex flex-wrap', className)}>\n        {map(items, (item) => (\n          <VideoItem key={item.id} item={item} />\n        ))}\n        {loading && map([...new Array(15)], (_, idx) => <VideoItem key={idx} />)}\n      </div>\n    </div>\n  );\n\n  return scrollable ? <Scrollable onScrollToEnd={onScrollToEnd}>{content}</Scrollable> : content;\n};\n\nexport default ItemsList;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport filter from 'lodash/filter';\nimport flatMap from 'lodash/flatMap';\nimport uniqBy from 'lodash/uniqBy';\n\nimport useApiInfinite from 'hooks/useApiInfinite';\n\ntype PageWithItems<T> = {\n  items: T[];\n};\n\nexport type QueryResult = ReturnType<typeof useApiInfinite>;\n\nfunction useInfiniteItems<T>(queryResult: QueryResult, processItems?: (items: T[]) => T[]) {\n  const { data, isLoading, isFetchingNextPage, fetchNextPage } = queryResult;\n  const [canFetchNextPage, setCanFetchNextPage] = useState(false);\n\n  const items = useMemo(\n    () => uniqBy(filter(flatMap<PageWithItems<T>, T>(data?.pages as unknown as PageWithItems<T>[], (page) => page.items)), 'id'),\n    [data?.pages],\n  );\n  const processedItems = useMemo(() => (processItems ? processItems(items) : items), [items, processItems]);\n\n  const handleLoadMore = useCallback(() => {\n    if (canFetchNextPage) {\n      fetchNextPage();\n      setCanFetchNextPage(false);\n    }\n  }, [canFetchNextPage, fetchNextPage]);\n\n  useEffect(() => {\n    setCanFetchNextPage(true);\n  }, [items.length]);\n\n  return [processedItems, isLoading || isFetchingNextPage, handleLoadMore] as const;\n}\n\nexport default useInfiniteItems;\n","import { useMemo } from 'react';\nimport { UseInfiniteQueryOptions, useInfiniteQuery } from 'react-query';\n\nimport ApiClient, { PaginationResponse } from 'api';\n\nimport { Method, Methods } from './useApi';\n\nfunction useApiInfinite<T extends Method>(\n  method: T,\n  params: Parameters<ApiClient[T]> = [] as Parameters<ApiClient[T]>,\n  options?: UseInfiniteQueryOptions<Methods[T]>,\n) {\n  const client = useMemo(() => new ApiClient(), []);\n  const query = useInfiniteQuery<Methods[T], string, Methods[T]>(\n    [method, ...params],\n    ({ pageParam }) => {\n      // @ts-expect-error\n      return client[method](...params, pageParam) as Methods[T];\n    },\n    {\n      // @ts-expect-error\n      getNextPageParam: (lastPage: PaginationResponse) => {\n        return lastPage?.pagination?.current + 1 || 1;\n      },\n      ...options,\n    },\n  );\n\n  return query;\n}\n\nexport default useApiInfinite;\n","import { Item } from 'api';\nimport ItemsList from 'components/itemsList';\nimport useInfiniteItems, { QueryResult } from 'hooks/useInfiniteItems';\n\ntype Props = {\n  title?: string;\n  queryResult: QueryResult;\n  processItems?: (items: Item[]) => Item[];\n};\n\nconst ItemsListInfinite: React.FC<Props> = ({ title, queryResult, processItems }) => {\n  const [items, isLoading, fetchMore] = useInfiniteItems(queryResult, processItems);\n\n  return <ItemsList title={title} items={items} loading={isLoading} onScrollToEnd={fetchMore} />;\n};\n\nexport default ItemsListInfinite;\n"],"sourceRoot":""}