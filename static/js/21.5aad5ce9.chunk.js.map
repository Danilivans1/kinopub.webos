{"version":3,"sources":["hooks/useInViewport.ts","hooks/useUniqueId.ts","components/scrollable/scrollable.tsx","components/lazy/lazy.tsx","components/imageItem/imageItem.tsx","hooks/useInfiniteItems.ts","hooks/useApiInfinite.ts","components/input/input.tsx","components/collectionItem/collectionItem.tsx","components/collectionsList/collectionsList.tsx","containers/collectionsListInfinite/collectionsListInfinite.tsx","views/collections/collections.tsx"],"names":["useInViewport","target","props","options","config","disconnectOnLeave","onEnterViewport","onLeaveViewport","useState","forceUpdate","observer","useRef","inViewportRef","intersected","enterCountRef","leaveCountRef","startObserver","useCallback","current","node","findDOMNode","observe","stopObserver","unobserve","disconnect","handleIntersection","entries","entry","isIntersecting","intersectionRatio","isInViewport","initIntersectionObserver","IntersectionObserver","useEffect","inViewport","enterCount","leaveCount","useUniqueId","prefix","uid","useUID","useMemo","ScrollableContext","createContext","Scrollable","children","className","onScrollToEnd","footerRef","id","value","Provider","cx","ref","Lazy","useContext","ImageItem","wrapperClassName","source","caption","loading","src","alt","useInfiniteItems","queryResult","processItems","data","isLoading","isFetchingNextPage","fetchNextPage","canFetchNextPage","setCanFetchNextPage","items","uniqBy","filter","flatMap","pages","page","processedItems","handleLoadMore","length","useApiInfinite","method","params","client","ApiClient","query","useInfiniteQuery","pageParam","getNextPageParam","lastPage","pagination","Input","onChange","handleChange","e","CollectionItem","collection","history","useHistory","handleOnClick","push","generatePath","PATHS","Collection","collectionId","onClick","posters","medium","title","CollectionsList","collections","scrollable","content","map","Array","_","idx","CollectionsListInfinite","fetchMore","CollectionsView","setQuery","handleQueryChange","placeholder"],"mappings":"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","file":"static/js/21.5aad5ce9.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { findDOMNode } from 'react-dom';\n\ntype Props = {\n  onEnterViewport?: () => void;\n  onLeaveViewport?: () => void;\n};\n\nconst useInViewport = (\n  target: React.MutableRefObject<React.ReactInstance | null | undefined>,\n  props: Props,\n  options?: IntersectionObserverInit,\n  config = { disconnectOnLeave: false },\n) => {\n  const { onEnterViewport, onLeaveViewport } = props;\n  const [, forceUpdate] = useState();\n\n  const observer = useRef<IntersectionObserver | null>(null);\n\n  const inViewportRef = useRef(false);\n  const intersected = useRef(false);\n\n  const enterCountRef = useRef(0);\n  const leaveCountRef = useRef(0);\n\n  const startObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.observe(node);\n      }\n    }\n  }, [target, observer]);\n\n  const stopObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.unobserve(node);\n        observer.current.disconnect();\n        observer.current = null;\n      }\n    }\n  }, [target, observer]);\n\n  const handleIntersection = useCallback(\n    (entries) => {\n      const entry = entries[0] || {};\n      const { isIntersecting, intersectionRatio } = entry;\n      const isInViewport = typeof isIntersecting !== 'undefined' ? isIntersecting : intersectionRatio > 0;\n\n      // enter\n      if (!intersected.current && isInViewport) {\n        intersected.current = true;\n\n        onEnterViewport?.();\n\n        enterCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n\n        return;\n      }\n\n      // leave\n      if (intersected.current && !isInViewport) {\n        intersected.current = false;\n\n        onLeaveViewport?.();\n\n        if (config.disconnectOnLeave && observer.current) {\n          // disconnect obsever on leave\n          observer.current.disconnect();\n        }\n\n        leaveCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n      }\n    },\n    [observer, config.disconnectOnLeave, onEnterViewport, onLeaveViewport],\n  );\n\n  const initIntersectionObserver = useCallback(() => {\n    if (!observer.current) {\n      observer.current = new IntersectionObserver(handleIntersection, options);\n    }\n  }, [observer, options, handleIntersection]);\n\n  useEffect(() => {\n    initIntersectionObserver();\n    startObserver();\n\n    return () => {\n      stopObserver();\n    };\n  }, [initIntersectionObserver, startObserver, stopObserver]);\n\n  return {\n    inViewport: inViewportRef.current,\n    enterCount: enterCountRef.current,\n    leaveCount: leaveCountRef.current,\n  };\n};\n\nexport default useInViewport;\n","import { useMemo } from 'react';\nimport { useUID } from 'react-uid';\n\nfunction useUniqueId(prefix: string) {\n  const uid = useUID();\n  const id = useMemo(() => `${prefix}-${uid}`, [prefix, uid]);\n\n  return id;\n}\n\nexport default useUniqueId;\n","import { createContext, useMemo, useRef } from 'react';\nimport cx from 'classnames';\n\nimport useInViewport from 'hooks/useInViewport';\nimport useUniqueId from 'hooks/useUniqueId';\n\nexport const ScrollableContext = createContext<{ id?: string }>({});\n\ntype Props = {\n  onScrollToEnd?: () => void;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst Scrollable: React.FC<Props> = ({ children, className, onScrollToEnd, ...props }) => {\n  const footerRef = useRef<HTMLDivElement>(null);\n  const id = useUniqueId('scrollable');\n  const value = useMemo(\n    () => ({\n      id,\n    }),\n    [id],\n  );\n\n  useInViewport(footerRef, { onEnterViewport: onScrollToEnd });\n\n  return (\n    <div id={id} className=\"overflow-hidden h-screen\" {...props}>\n      <ScrollableContext.Provider value={value}>\n        <div className={cx('overflow-y-auto h-full', className)}>\n          {children}\n          <div className=\"h-40\" ref={footerRef} />\n        </div>\n      </ScrollableContext.Provider>\n    </div>\n  );\n};\n\nexport default Scrollable;\n","import { useContext } from 'react';\n// eslint-disable-next-line\nimport LazyLoad, { LazyLoadProps } from 'react-lazyload';\n\nimport { ScrollableContext } from 'components/scrollable';\n\ntype Props = {\n  className?: string;\n} & LazyLoadProps;\n\nconst Lazy: React.FC<Props> = (props) => {\n  // eslint-disable-next-line\n  const { id: scrollableId } = useContext(ScrollableContext);\n\n  // return <LazyLoad once offset={100} scrollContainer={scrollableId && `#${scrollableId}`} {...props} />;\n\n  // @ts-expect-error\n  return <div {...props} />;\n};\n\nexport function withLazy(options: Props) {\n  return function WithLazy<P>(Component: React.ComponentType<P>): React.FC<P> {\n    return (props: P) => (\n      <Lazy {...options}>\n        <Component {...props} />\n      </Lazy>\n    );\n  };\n}\n\nexport default Lazy;\n","import cx from 'classnames';\n\nimport Lazy from 'components/lazy';\nimport Spottable from 'components/spottable';\n\ntype Props = {\n  className?: string;\n  wrapperClassName?: string;\n  source?: string;\n  caption?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst ImageItem: React.FC<Props> = ({ className, wrapperClassName, source, caption, children, ...props }) => {\n  return (\n    <Spottable {...props} className={cx('rounded-xl w-1/6', wrapperClassName)}>\n      <Lazy className={cx('h-40 m-1 flex flex-col relative overflow-hidden cursor-pointer', className)}>\n        <img loading=\"lazy\" className=\"w-full h-full object-cover rounded-xl bg-gray-300\" src={source} alt={caption} />\n        <div className=\"px-2\">\n          <p className=\"text-primary text-sm text-center overflow-hidden whitespace-nowrap\">{caption}</p>\n        </div>\n\n        {children}\n      </Lazy>\n    </Spottable>\n  );\n};\n\nexport default ImageItem;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport filter from 'lodash/filter';\nimport flatMap from 'lodash/flatMap';\nimport uniqBy from 'lodash/uniqBy';\n\nimport useApiInfinite from 'hooks/useApiInfinite';\n\ntype PageWithItems<T> = {\n  items: T[];\n};\n\nexport type QueryResult = ReturnType<typeof useApiInfinite>;\n\nfunction useInfiniteItems<T>(queryResult: QueryResult, processItems?: (items: T[]) => T[]) {\n  const { data, isLoading, isFetchingNextPage, fetchNextPage } = queryResult;\n  const [canFetchNextPage, setCanFetchNextPage] = useState(false);\n\n  const items = useMemo(\n    () => uniqBy(filter(flatMap<PageWithItems<T>, T>(data?.pages as unknown as PageWithItems<T>[], (page) => page.items)), 'id'),\n    [data?.pages],\n  );\n  const processedItems = useMemo(() => (processItems ? processItems(items) : items), [items, processItems]);\n\n  const handleLoadMore = useCallback(() => {\n    if (canFetchNextPage) {\n      fetchNextPage();\n      setCanFetchNextPage(false);\n    }\n  }, [canFetchNextPage, fetchNextPage]);\n\n  useEffect(() => {\n    setCanFetchNextPage(true);\n  }, [items.length]);\n\n  return [processedItems, isLoading || isFetchingNextPage, handleLoadMore] as const;\n}\n\nexport default useInfiniteItems;\n","import { useMemo } from 'react';\nimport { UseInfiniteQueryOptions, useInfiniteQuery } from 'react-query';\n\nimport ApiClient, { PaginationResponse } from 'api';\n\nimport { Method, Methods } from './useApi';\n\nfunction useApiInfinite<T extends Method>(\n  method: T,\n  params: Parameters<ApiClient[T]> = [] as Parameters<ApiClient[T]>,\n  options?: UseInfiniteQueryOptions<Methods[T]>,\n) {\n  const client = useMemo(() => new ApiClient(), []);\n  const query = useInfiniteQuery<Methods[T], string, Methods[T]>(\n    [method, ...params],\n    ({ pageParam }) => {\n      // @ts-expect-error\n      return client[method](...params, pageParam) as Methods[T];\n    },\n    {\n      // @ts-expect-error\n      getNextPageParam: (lastPage: PaginationResponse) => {\n        return lastPage?.pagination?.current + 1 || 1;\n      },\n      ...options,\n    },\n  );\n\n  return query;\n}\n\nexport default useApiInfinite;\n","import { useCallback } from 'react';\nimport cx from 'classnames';\n\nimport Spottable from 'components/spottable';\n\ntype Props = {\n  onChange?: (value: string, e: React.ChangeEvent<HTMLInputElement>) => void;\n} & React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\nconst Input: React.FC<Props> = ({ className, onChange, ...props }) => {\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>(\n    (e) => {\n      onChange?.(e.target.value, e);\n    },\n    [onChange],\n  );\n\n  return (\n    <Spottable className={cx('w-full rounded', className)}>\n      <input {...props} onChange={handleChange} className={'w-full h-auto px-2 py-1 rounded text-gray-500'} />\n    </Spottable>\n  );\n};\n\nexport default Input;\n","import { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport cx from 'classnames';\n\nimport { Collection } from 'api';\nimport ImageItem from 'components/imageItem';\nimport { PATHS, generatePath } from 'routes';\n\ntype Props = {\n  collection?: Collection;\n  className?: string;\n};\n\nconst CollectionItem: React.FC<Props> = ({ collection, className }) => {\n  const history = useHistory();\n  const handleOnClick = useCallback(() => {\n    if (collection?.id) {\n      history.push(\n        generatePath(PATHS.Collection, {\n          collectionId: collection.id,\n        }),\n      );\n    }\n  }, [collection?.id, history]);\n\n  return (\n    <ImageItem onClick={handleOnClick} source={collection?.posters.medium} caption={collection?.title} className={cx('h-72', className)} />\n  );\n};\n\nexport default CollectionItem;\n","import React from 'react';\nimport map from 'lodash/map';\n\nimport { Collection } from 'api';\nimport CollectionItem from 'components/collectionItem';\nimport Scrollable from 'components/scrollable';\n\ntype Props = {\n  collections?: Collection[];\n  loading?: boolean;\n  onScrollToEnd?: () => void;\n  scrollable?: boolean;\n};\n\nconst CollectionsList: React.FC<Props> = ({ collections, loading, onScrollToEnd, scrollable = true }) => {\n  const content = (\n    <div className=\"flex flex-wrap pr-2\">\n      {map(collections, (collection) => (\n        <CollectionItem key={collection.id} collection={collection} />\n      ))}\n      {loading && map([...new Array(15)], (_, idx) => <CollectionItem key={idx} />)}\n    </div>\n  );\n\n  return scrollable ? <Scrollable onScrollToEnd={onScrollToEnd}>{content}</Scrollable> : content;\n};\n\nexport default CollectionsList;\n","import { Collection } from 'api';\nimport CollectionsList from 'components/collectionsList';\nimport useInfiniteItems, { QueryResult } from 'hooks/useInfiniteItems';\n\ntype Props = {\n  queryResult: QueryResult;\n  processItems?: (items: Collection[]) => Collection[];\n};\n\nconst CollectionsListInfinite: React.FC<Props> = ({ queryResult, processItems }) => {\n  const [items, isLoading, fetchMore] = useInfiniteItems(queryResult, processItems);\n\n  return <CollectionsList collections={items} loading={isLoading} onScrollToEnd={fetchMore} />;\n};\n\nexport default CollectionsListInfinite;\n","import React, { useCallback, useState } from 'react';\n\nimport Input from 'components/input';\nimport CollectionsListInfinite from 'containers/collectionsListInfinite';\nimport useApiInfinite from 'hooks/useApiInfinite';\n\nconst CollectionsView: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const queryResult = useApiInfinite('collections', [query, 'watchers-']);\n\n  const handleQueryChange = useCallback(\n    (value) => {\n      setQuery(value);\n    },\n    [setQuery],\n  );\n\n  return (\n    <>\n      <div className=\"m-1 mb-3 mr-2\">\n        <Input placeholder=\"Название подборки...\" value={query} onChange={handleQueryChange} />\n      </div>\n      <CollectionsListInfinite queryResult={queryResult} />\n    </>\n  );\n};\n\nexport default CollectionsView;\n"],"sourceRoot":""}