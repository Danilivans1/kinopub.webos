{"version":3,"sources":["views/video/video.tsx","hooks/useApi.ts","../node_modules/react-query/es/react/QueryErrorResetBoundary.js","../node_modules/react-query/es/react/useBaseQuery.js","../node_modules/react-query/es/core/queryObserver.js","../node_modules/react-query/es/react/useQuery.js","utils/item.ts"],"names":["usePrevNextVideos","item","season","video","nextVideo","useMemo","videos","episodes","find","number","nextSeason","seasons","useNextVideo","previousVideo","previousSeason","length","usePreviousVideo","VideoView","history","useHistory","location","useLocation","watchingMarkTimeAsync","useApiMutation","useStorageState","streamingType","state","useState","currentVideo","setCurrentVideo","currentVideoLinks","useApi","id","saveCurrentTime","useCallback","currentTime","a","playerProps","data","title","getItemTitle","description","poster","posters","wide","big","audios","mapAudios","sources","mapSources","files","subtitles","mapSubtitles","startTime","watching","status","WatchingStatus","Watching","time","handlePause","handleOnEnded","goBack","handleJumpBackward","handleJumpForward","handleTimeSync","onPause","onEnded","onJumpBackward","onJumpForward","onTimeSync","method","params","options","client","ApiClient","query","useQuery","createValue","_isReset","clearReset","reset","isReset","QueryErrorResetBoundaryContext","React","createContext","useBaseQuery","Observer","mountedRef","useRef","forceUpdate","queryClient","useQueryClient","errorResetBoundary","useContext","defaultedOptions","defaultQueryObserverOptions","optimisticResults","onError","notifyManager","batchCalls","onSuccess","onSettled","suspense","staleTime","useErrorBoundary","retryOnMount","observer","result","getOptimisticResult","useEffect","current","unsubscribe","subscribe","x","updateResult","setOptions","listeners","isLoading","fetchOptimistic","then","_ref","catch","error","undefined","isError","isFetching","notifyOnChangeProps","trackResult","QueryObserver","_Subscribable","_this","call","this","trackedProps","previousSelectError","bindMethods","_inheritsLoose","_proto","prototype","remove","bind","refetch","onSubscribe","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","enabled","refetchOnReconnect","isStale","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearTimers","removeObserver","notifyOptions","prevOptions","prevQuery","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateStaleTimeout","refetchInterval","updateRefetchInterval","getQueryCache","build","createResult","getCurrentResult","currentResult","_this2","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","typedKey","includes","push","getNextResult","_this3","Promise","resolve","reject","throwOnError","getCurrentQuery","fetch","_this4","fetchOptions","_this5","promise","noop","_this6","clearStaleTimeout","isServer","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","_this7","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","isPreviousData","isPlaceholderData","fetchOnMount","fetchOptionally","keepPreviousData","dataUpdateCount","isSuccess","select","structuralSharing","replaceEqualDeep","selectError","getLogger","Date","now","placeholderData","isIdle","failureCount","fetchFailureCount","isFetched","errorUpdateCount","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","_this$options","notifyOnChangePropsExclusions","includedProps","some","changed","isIncluded","isExcluded","shallowEqualObjects","defaultNotifyOptions","cache","notify","_extends","onQueryUpdate","action","type","isCancelledError","_this8","batch","listener","Subscribable","shouldLoadOnMount","refetchOnMount","shouldRefetchOnMount","isStaleByTime","arg1","arg2","arg3","parsedOptions","parseQueryArgs"],"mappings":"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","file":"static/js/21.98cdef2a.chunk.js","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { ItemDetails, Season, Streaming, Video, WatchingStatus } from 'api';\nimport Player, { PlayerProps } from 'components/player';\nimport useApi from 'hooks/useApi';\nimport useApiMutation from 'hooks/useApiMutation';\nimport useStorageState from 'hooks/useStorageState';\n\nimport { getItemTitle } from 'utils/item';\nimport { mapAudios, mapSources, mapSubtitles } from 'utils/video';\n\nconst useNextVideo = (item: ItemDetails, season: Season, video: Video) =>\n  useMemo(() => {\n    const nextVideo = (item.videos || season?.episodes)?.find(({ number }) => number === video.number + 1);\n\n    if (nextVideo) {\n      return nextVideo;\n    }\n\n    const nextSeason = item.seasons?.find(({ number }) => number === season.number + 1);\n    if (nextSeason) {\n      return nextSeason.episodes[0];\n    }\n  }, [item, season, video]);\n\nconst usePreviousVideo = (item: ItemDetails, season: Season, video: Video) =>\n  useMemo(() => {\n    const previousVideo = (item.videos || season?.episodes)?.find(({ number }) => number === video.number - 1);\n\n    if (previousVideo) {\n      return previousVideo;\n    }\n\n    const previousSeason = item.seasons?.find(({ number }) => number === season.number - 1);\n    if (previousSeason) {\n      return previousSeason.episodes[previousSeason.episodes.length - 1];\n    }\n  }, [item, season, video]);\n\nconst usePrevNextVideos = (item: ItemDetails, season: Season, video: Video) => {\n  const nextVideo = useNextVideo(item, season, video);\n  const previousVideo = usePreviousVideo(item, season, video);\n\n  return [previousVideo, nextVideo] as const;\n};\n\nconst VideoView: React.FC = () => {\n  const history = useHistory();\n  const location = useLocation<{ title: string; item: ItemDetails; video: Video; season: Season }>();\n  const { watchingMarkTimeAsync } = useApiMutation('watchingMarkTime');\n  const [streamingType] = useStorageState<Streaming>('streaming_type');\n  const { item, video, season } = location.state;\n\n  const [currentVideo, setCurrentVideo] = useState(video);\n  const [previousVideo, nextVideo] = usePrevNextVideos(item, season, currentVideo);\n\n  const currentVideoLinks = useApi('itemMediaLinks', [currentVideo.id]);\n\n  const saveCurrentTime = useCallback(\n    async ({ number }: Video, currentTime: number) => {\n      await watchingMarkTimeAsync([item.id, currentTime, number, season?.number]);\n    },\n    [watchingMarkTimeAsync, item, season],\n  );\n\n  const playerProps = useMemo<PlayerProps | null>(\n    () =>\n      currentVideoLinks?.data\n        ? {\n            title: getItemTitle(item, currentVideo, season),\n            description: currentVideo.title,\n            poster: item.posters.wide || item.posters.big,\n            audios: mapAudios(currentVideo.audios),\n            sources: mapSources(currentVideoLinks.data.files, streamingType),\n            subtitles: mapSubtitles(currentVideoLinks.data.subtitles),\n            startTime: currentVideo.watching.status === WatchingStatus.Watching ? currentVideo.watching.time : 0,\n          }\n        : null,\n    [item, season, currentVideo, currentVideoLinks?.data, streamingType],\n  );\n\n  const handlePause = useCallback(\n    (currentTime: number) => {\n      saveCurrentTime(currentVideo, currentTime);\n    },\n    [saveCurrentTime, currentVideo],\n  );\n\n  const handleOnEnded = useCallback(\n    (currentTime: number) => {\n      saveCurrentTime(currentVideo, currentTime);\n\n      if (nextVideo) {\n        setCurrentVideo(nextVideo);\n        return;\n      }\n\n      history.goBack();\n    },\n    [saveCurrentTime, history, currentVideo, nextVideo],\n  );\n\n  const handleJumpBackward = useCallback(\n    ({ currentTime }: { currentTime: number }) => {\n      saveCurrentTime(currentVideo, currentTime);\n\n      if (previousVideo) {\n        setCurrentVideo(previousVideo);\n      }\n    },\n    [saveCurrentTime, currentVideo, previousVideo],\n  );\n\n  const handleJumpForward = useCallback(\n    ({ currentTime }: { currentTime: number }) => {\n      saveCurrentTime(currentVideo, currentTime);\n\n      if (nextVideo) {\n        setCurrentVideo(nextVideo);\n      }\n    },\n    [saveCurrentTime, currentVideo, nextVideo],\n  );\n\n  const handleTimeSync = useCallback(\n    async (currentTime: number) => {\n      await saveCurrentTime(currentVideo, currentTime);\n    },\n    [saveCurrentTime, currentVideo],\n  );\n\n  return (\n    <>\n      {playerProps && (\n        <Player\n          key={currentVideo.id}\n          {...playerProps}\n          onPause={handlePause}\n          onEnded={handleOnEnded}\n          onJumpBackward={handleJumpBackward}\n          onJumpForward={handleJumpForward}\n          onTimeSync={handleTimeSync}\n        />\n      )}\n    </>\n  );\n};\n\nexport default VideoView;\n","import { useMemo } from 'react';\nimport { UseQueryOptions, useQuery } from 'react-query';\n\nimport ApiClient from 'api';\n\ntype Unpromise<T> = T extends Promise<infer U> ? U : T;\n\nexport type Methods = {\n  [method in keyof ApiClient]: ApiClient[method] extends Function ? Unpromise<ReturnType<ApiClient[method]>> : never;\n};\n\nexport type Method = keyof ApiClient & string;\n\nfunction useApi<T extends Method>(\n  method: T,\n  params: Parameters<ApiClient[T]> = [] as Parameters<ApiClient[T]>,\n  options?: UseQueryOptions<Methods[T]>,\n) {\n  const client = useMemo(() => new ApiClient(), []);\n  const query = useQuery<Methods[T]>(\n    [method, ...params],\n    () =>\n      // @ts-expect-error\n      client[method](...params) as Methods[T],\n    options,\n  );\n\n  return query;\n}\n\nexport default useApi;\n","import React from 'react'; // CONTEXT\n\nfunction createValue() {\n  var _isReset = false;\n  return {\n    clearReset: function clearReset() {\n      _isReset = false;\n    },\n    reset: function reset() {\n      _isReset = true;\n    },\n    isReset: function isReset() {\n      return _isReset;\n    }\n  };\n}\n\nvar QueryErrorResetBoundaryContext = /*#__PURE__*/React.createContext(createValue()); // HOOK\n\nexport var useQueryErrorResetBoundary = function useQueryErrorResetBoundary() {\n  return React.useContext(QueryErrorResetBoundaryContext);\n}; // COMPONENT\n\nexport var QueryErrorResetBoundary = function QueryErrorResetBoundary(_ref) {\n  var children = _ref.children;\n  var value = React.useMemo(function () {\n    return createValue();\n  }, []);\n  return /*#__PURE__*/React.createElement(QueryErrorResetBoundaryContext.Provider, {\n    value: value\n  }, typeof children === 'function' ? children(value) : children);\n};","import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions.optimisticResults = true; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  var _React$useState2 = React.useState(function () {\n    return new Observer(queryClient, defaultedOptions);\n  }),\n      observer = _React$useState2[0];\n\n  var result = observer.getOptimisticResult(defaultedOptions);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    errorResetBoundary.clearReset();\n    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    })); // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n\n    observer.updateResult();\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [errorResetBoundary, observer]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw observer.fetchOptimistic(defaultedOptions).then(function (_ref) {\n      var data = _ref.data;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(function (error) {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if ((defaultedOptions.suspense || defaultedOptions.useErrorBoundary) && result.isError && !result.isFetching) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = observer.trackResult(result);\n  }\n\n  return result;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nimport { getLogger } from './logger';\nimport { isCancelledError } from './retryer';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = [];\n    _this.previousSelectError = null;\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {\n    return _shouldFetchOnReconnect(this.currentQuery, this.options);\n  };\n\n  _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {\n    return _shouldFetchOnWindowFocus(this.currentQuery, this.options);\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n\n  _proto.setOptions = function setOptions(options, notifyOptions) {\n    var prevOptions = this.options;\n    var prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryObserverOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    } // Update refetch interval if needed\n\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.refetchInterval !== prevOptions.refetchInterval)) {\n      this.updateRefetchInterval();\n    }\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return this.createResult(query, defaultedOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.trackResult = function trackResult(result) {\n    var _this2 = this;\n\n    var trackedResult = {};\n    Object.keys(result).forEach(function (key) {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: function get() {\n          var typedKey = key;\n\n          if (!_this2.trackedProps.includes(typedKey)) {\n            _this2.trackedProps.push(typedKey);\n          }\n\n          return result[typedKey];\n        }\n      });\n    });\n    return trackedResult;\n  };\n\n  _proto.getNextResult = function getNextResult(options) {\n    var _this3 = this;\n\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this3.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.fetch(options);\n  };\n\n  _proto.fetchOptimistic = function fetchOptimistic(options) {\n    var _this4 = this;\n\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return query.fetch().then(function () {\n      return _this4.createResult(query, defaultedOptions);\n    });\n  };\n\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this5 = this;\n\n    return this.executeFetch(fetchOptions).then(function () {\n      _this5.updateResult();\n\n      return _this5.currentResult;\n    });\n  };\n\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this6 = this;\n\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this6.currentResult.isStale) {\n        _this6.updateResult();\n      }\n    }, timeout);\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this7 = this;\n\n    this.clearRefetchInterval();\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.options.refetchInterval)) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this7.executeFetch();\n      }\n    }, this.options.refetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n\n  _proto.createResult = function createResult(query, options) {\n    var prevQuery = this.currentQuery;\n    var prevOptions = this.options;\n    var prevResult = this.currentResult;\n    var prevResultState = this.currentResultState;\n    var prevResultOptions = this.currentResultOptions;\n    var queryChange = query !== prevQuery;\n    var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    var state = query.state;\n    var dataUpdatedAt = state.dataUpdatedAt,\n        error = state.error,\n        errorUpdatedAt = state.errorUpdatedAt,\n        isFetching = state.isFetching,\n        status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data; // Optimistically set result in fetching state if needed\n\n    if (options.optimisticResults) {\n      var mounted = this.hasListeners();\n      var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true;\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n        // Memoize select result\n        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === (prevResultOptions == null ? void 0 : prevResultOptions.select) && !this.previousSelectError) {\n          data = prevResult.data;\n        } else {\n          try {\n            data = options.select(state.data);\n\n            if (options.structuralSharing !== false) {\n              data = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, data);\n            }\n\n            this.previousSelectError = null;\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      } // Use query data\n      else {\n          data = state.data;\n        } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      var placeholderData; // Memoize placeholder data\n\n      if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, placeholderData);\n            }\n\n            this.previousSelectError = null;\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    var result = {\n      status: status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: error,\n      errorUpdatedAt: errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  };\n\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {\n    if (!prevResult) {\n      return true;\n    }\n\n    if (result === prevResult) {\n      return false;\n    }\n\n    var _this$options = this.options,\n        notifyOnChangeProps = _this$options.notifyOnChangeProps,\n        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true;\n    }\n\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n    return Object.keys(result).some(function (key) {\n      var typedKey = key;\n      var changed = result[typedKey] !== prevResult[typedKey];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n      return changed && !isExcluded && (!includedProps || isIncluded);\n    });\n  };\n\n  _proto.updateResult = function updateResult(notifyOptions) {\n    var prevResult = this.currentResult;\n    this.currentResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify if something has changed\n\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return;\n    } // Determine which callbacks to trigger\n\n\n    var defaultNotifyOptions = {\n      cache: true\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify(_extends({}, defaultNotifyOptions, notifyOptions));\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    var prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    var notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify({\n          query: _this8.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  };\n\n  return QueryObserver;\n}(Subscribable);\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldRefetchOnMount(query, options) {\n  return options.enabled !== false && query.state.dataUpdatedAt > 0 && (options.refetchOnMount === 'always' || options.refetchOnMount !== false && isStale(query, options));\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options);\n}\n\nfunction _shouldFetchOnReconnect(query, options) {\n  return options.enabled !== false && (options.refetchOnReconnect === 'always' || options.refetchOnReconnect !== false && isStale(query, options));\n}\n\nfunction _shouldFetchOnWindowFocus(query, options) {\n  return options.enabled !== false && (options.refetchOnWindowFocus === 'always' || options.refetchOnWindowFocus !== false && isStale(query, options));\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}","import { QueryObserver } from '../core';\nimport { parseQueryArgs } from '../core/utils';\nimport { useBaseQuery } from './useBaseQuery'; // HOOK\n\nexport function useQuery(arg1, arg2, arg3) {\n  var parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  return useBaseQuery(parsedOptions, QueryObserver);\n}","import { ItemDetails, Season, Video } from 'api';\n\nexport function getItemTitle(item?: ItemDetails, video?: Video, season?: Season) {\n  return season ? `${item?.title} (s${season.number}e${video?.number || 1})` : item?.title!;\n}\n"],"sourceRoot":""}