{"version":3,"sources":["views/channel/channel.tsx","components/seo/seo.tsx","components/button/button.tsx","components/checkbox/checkbox.tsx","components/spotlightContainer/spotlightContainer.tsx","components/popup/popup.tsx","components/radio/radio.tsx","utils/video.ts","utils/subtitles.ts","components/media/media.new.tsx","components/player/settings.tsx","components/player/startFrom.tsx","components/player/player.tsx"],"names":["ChannelView","history","useHistory","channel","useLocation","state","playerProps","useMemo","title","poster","logos","m","sources","mapSources","url","stream","handleOnEnded","useCallback","goBack","onEnded","Seo","props","Helmet","defaultTitle","titleTemplate","Button","icon","iconOnly","children","autoFocus","className","wrapperRef","useRef","useEffect","frameId","requestAnimationFrame","current","node","focus","cancelAnimationFrame","ref","cx","role","name","Checkbox","defaultChecked","checked","onChange","inputRef","handleChange","e","target","handleKeyPress","isKey","click","component","onKeyPress","type","SpotlightContainer","SpotlightContainerDecorator","enterTo","defaultElement","selector","overflow","preserveId","Popup","visible","onClose","closeButton","containerId","Spotlight","add","handleClose","handleCloseIfVisible","spotPopupContent","getCurrent","blur","setActiveContainer","setTimeout","setPointerMode","useButtonEffect","hidden","onClick","spotlightId","spotlightRestrict","spotlightDisabled","Radio","formatIdx","idx","mapAudios","audios","map","audio","lang","filter","author","toUpper","codec","join","files","streamingType","orderBy","file","src","http","quality","includes","parseInt","mapSubtitles","subtitles","subtitle","WebVTTConverter","resource","objectURL","this","Promise","resolve","reject","reader","FileReader","addEventListener","event","buf","result","Uint8Array","readAsArrayBuffer","Blob","TextDecoder","blobToString","decoded","text","concat","toVTT","blob","URL","createObjectURL","blobToBuffer","then","buffer","utf8str","decode","success","fail","readAsText","replace","str","split","forEach","each","push","charCodeAt","from","a","fetch","converter","getURL","useVideoPlayer","autoPlay","audioTracks","sourceTracks","subtitleTracks","isSettingsOpen","videoRef","hlsRef","startTimeRef","isSettingsOpenRef","useStorageState","isHLSJSActive","useState","currentAudioTrack","setCurrentAudioTrack","currentSourceTrack","setCurrentSourceTrack","currentSubtitleTrack","setCurrentSubtitleTrack","getAudioTracks","getAudioTrack","setAudioTrack","audioTrackName","audioTrack","find","getSourceTracks","uniqBy","getSourceTrack","setSourceTrack","sourceTrackName","sourceTrack","getSubtitleTracks","getSubtitleTrack","setSubtitleTrack","subtitleTrackName","subtitleTrack","currentAudioTrackIndex","findIndex","currentSrc","handleMediaLoaded","removeEventListener","firstChild","lastChild","track","mode","removeChild","id","enabled","currentTime","pause","play","addSubtitleTrack","document","createElement","appendChild","kind","label","srclang","endsWith","convertToVTT","HLS","isSupported","hls","enableWebVTT","enableCEA708Captions","attachMedia","on","Events","MEDIA_ATTACHED","loadSource","destroy","Boolean","MEDIA_EVENTS","Media","React","forwardRef","onUpdate","mediaComponent","handleUpdate","eventProps","reduce","args","player","getCurrentTime","setCurrentTime","getPlaybackRate","playbackRate","setPlaybackRate","getPaused","paused","getDuration","duration","getError","networkState","NETWORK_NO_SOURCE","getLoading","readyState","HAVE_ENOUGH_DATA","getProportionLoaded","buffered","length","end","getProportionPlayed","playPause","load","api","useImperativeHandle","useVideoPlayerApi","NONE","Settings","isOpen","setIsOpen","setAudios","currentAudio","setCurrentAudio","setSources","currentSource","setCurrentSource","setSubtitles","currentSubtitle","setCurrentSubtitle","handleVideoUpdate","value","getVideoNode","handleAudioChange","handleSourceChange","source","handleSubtitleChange","video","timeoutId","clearTimeout","StartFrom","startTime","startInDelay","setVisible","startIn","setStartIn","startFrom","Date","toISOString","substr","handleStartFromClick","handleStartFromBeginingClick","intervalId","setInterval","prevStartIn","newStartIn","clearInterval","Player","description","timeSyncInterval","onPlay","onPause","onTimeSync","playerRef","isPaused","setIsPaused","isLoaded","setIsLoaded","setIsSettingsOpen","handlePlay","handlePause","handleEnded","handleTimeSync","handleLoadedMetadata","handleSettingsOpen","handleSettingsClose","handlePauseButton","onLoadedMetadata","videoComponent"],"mappings":"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","file":"static/js/23.54ea046a.chunk.js","sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { Channel } from 'api';\nimport Player, { PlayerProps } from 'components/player';\nimport Seo from 'components/seo';\n\nimport { mapSources } from 'utils/video';\n\nconst ChannelView: React.FC = () => {\n  const history = useHistory();\n  const location = useLocation<{ channel: Channel }>();\n  const { channel } = location.state || {};\n\n  const playerProps = useMemo<PlayerProps>(() => {\n    return {\n      title: channel.title,\n      poster: channel.logos.m,\n      sources: mapSources([\n        {\n          url: channel.stream,\n        },\n      ]),\n    };\n  }, [channel]);\n\n  const handleOnEnded = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n  return (\n    <>\n      <Seo title={`Канал: ${channel.title}`} />\n      <Player {...playerProps} onEnded={handleOnEnded} />\n    </>\n  );\n};\n\nexport default ChannelView;\n","import { Helmet, HelmetProps } from 'react-helmet';\n\ntype Props = {} & HelmetProps;\n\nconst Seo: React.FC<Props> = (props) => {\n  return <Helmet defaultTitle=\"Unknown\" titleTemplate=\"%s | Kinopub WebOS\" {...props} />;\n};\n\nexport default Seo;\n","import { useEffect, useRef } from 'react';\nimport cx from 'classnames';\n\nimport Icon from 'components/icon';\nimport Spottable from 'components/spottable';\n\ntype Props = {\n  icon?: string;\n  iconOnly?: boolean;\n  autoFocus?: boolean;\n  className?: string;\n} & React.ComponentProps<typeof Spottable>;\n\nconst Button: React.FC<Props> = ({ icon, iconOnly, children, autoFocus, className, ...props }) => {\n  const wrapperRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    let frameId: number;\n\n    if (autoFocus) {\n      frameId = requestAnimationFrame(() => {\n        // @ts-expect-error\n        wrapperRef.current?.node?.focus();\n      });\n    }\n\n    return () => {\n      if (frameId) {\n        cancelAnimationFrame(frameId);\n      }\n    };\n  }, [wrapperRef, autoFocus]);\n\n  return (\n    <Spottable\n      {...props}\n      ref={wrapperRef}\n      className={cx('text-gray-200 whitespace-nowrap cursor-pointer rounded px-2 py-1', className)}\n      role=\"button\"\n    >\n      <div className=\"flex items-center\">\n        {icon && <Icon className={cx({ 'mr-2': !iconOnly })} name={icon} />}\n        {!iconOnly && children}\n      </div>\n    </Spottable>\n  );\n};\n\nexport default Button;\n","import { useCallback, useRef } from 'react';\nimport React from 'react';\nimport cx from 'classnames';\n\nimport Spottable from 'components/spottable';\n\nimport { isKey } from 'utils/keyboard';\n\nexport type CheckboxProps = {\n  defaultChecked?: boolean;\n  checked?: boolean;\n  onChange?: (checked: boolean, e: React.ChangeEvent<HTMLInputElement>) => void;\n  className?: string;\n  type?: string;\n} & Omit<React.HTMLAttributes<HTMLInputElement>, 'onChange'>;\n\nconst Checkbox: React.FC<CheckboxProps> = ({ defaultChecked, checked, onChange, className, children, ...props }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>(\n    (e) => {\n      onChange?.(e.target.checked, e);\n    },\n    [onChange],\n  );\n  const handleKeyPress = useCallback((e: KeyboardEvent) => {\n    if (isKey(e, 'Enter')) {\n      inputRef.current?.click();\n    }\n  }, []);\n\n  return (\n    <Spottable\n      component=\"label\"\n      className={cx('text-gray-200 p-2', className)}\n      // @ts-expect-error\n      onKeyPress={handleKeyPress}\n      role=\"button\"\n    >\n      <div className=\"inline-flex items-center cursor-pointer\">\n        <input\n          type=\"checkbox\"\n          {...props}\n          ref={inputRef}\n          className=\"inline-block w-4 h-4\"\n          defaultChecked={defaultChecked}\n          checked={checked}\n          onChange={handleChange}\n        />\n        <span className=\"inline-block ml-2 whitespace-nowrap\">{children}</span>\n      </div>\n    </Spottable>\n  );\n};\n\nexport default Checkbox;\n","import SpotlightContainerDecorator from '@enact/spotlight/SpotlightContainerDecorator';\n\nexport const CONFIG = {\n  enterTo: 'default-element',\n  defaultElement: '.spottable',\n  selector: '.spottable',\n  overflow: true,\n  preserveId: true,\n};\n\nconst SpotlightContainer = SpotlightContainerDecorator(CONFIG, (props: React.HTMLAttributes<HTMLDivElement>) => <div {...props} />);\n\nexport default SpotlightContainer;\n","import { useCallback, useEffect, useMemo } from 'react';\nimport Spotlight from '@enact/spotlight';\nimport cx from 'classnames';\n\nimport SpotlightContainer from 'components/spotlightContainer';\nimport useButtonEffect, { KeyboardCodesKeys } from 'hooks/useButtonEffect';\n\ntype Props = {\n  visible: boolean;\n  onClose: () => void;\n  closeButton?: KeyboardCodesKeys;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst Popup: React.FC<Props> = ({ visible, onClose, className, closeButton = 'Blue', ...props }) => {\n  const containerId = useMemo(() => Spotlight.add({}), []);\n  const handleClose = useCallback(() => {\n    onClose();\n  }, [onClose]);\n\n  const handleCloseIfVisible = useCallback(() => {\n    if (visible) {\n      handleClose();\n\n      return false;\n    }\n  }, [visible, handleClose]);\n\n  const spotPopupContent = useCallback(() => {\n    if (!Spotlight.focus(containerId)) {\n      const current = Spotlight.getCurrent();\n\n      // In cases where the container contains no spottable controls or we're in pointer-mode, focus\n      // cannot inherently set the active container or blur the active control, so we must do that\n      // here.\n      if (current) {\n        // @ts-expect-error\n        current.blur();\n      }\n\n      Spotlight.setActiveContainer(containerId);\n      setTimeout(() => {\n        Spotlight.setPointerMode(false);\n        Spotlight.focus(containerId);\n      }, 500);\n    }\n  }, [containerId]);\n\n  useButtonEffect('Back', handleCloseIfVisible);\n  useButtonEffect(closeButton, handleCloseIfVisible);\n\n  useEffect(() => {\n    if (visible) {\n      spotPopupContent();\n    }\n  }, [visible, spotPopupContent]);\n\n  return (\n    <>\n      <div\n        className={cx('fixed z-999 top-0 left-0 right-0 bottom-0 bg-black bg-opacity-50', {\n          hidden: !visible,\n        })}\n        onClick={handleClose}\n      />\n      <SpotlightContainer\n        {...props}\n        spotlightId={containerId}\n        spotlightRestrict=\"self-only\"\n        spotlightDisabled={!visible}\n        className={cx(\n          'fixed z-999 bottom-0 left-0 right-0 p-4 bg-black ring',\n          {\n            hidden: !visible,\n          },\n          className,\n        )}\n      />\n    </>\n  );\n};\n\nexport default Popup;\n","import React from 'react';\n\nimport Checkbox, { CheckboxProps } from 'components/checkbox';\n\ntype Props = {} & CheckboxProps;\n\nconst Radio: React.FC<Props> = (props) => {\n  return <Checkbox {...props} type=\"radio\" />;\n};\n\nexport default Radio;\n","import filter from 'lodash/filter';\nimport map from 'lodash/map';\nimport orderBy from 'lodash/orderBy';\nimport toUpper from 'lodash/toUpper';\n\nimport { Audio, Streaming, Subtitle } from 'api';\nimport { AudioTrack, SourceTrack, SubtitleTrack } from 'components/media';\n\nconst formatIdx = (idx: number) => (idx < 10 ? `0${idx}` : idx);\n\nexport function mapAudios(audios: Audio[]): AudioTrack[] {\n  return map(audios, (audio, idx) => ({\n    lang: audio.lang,\n    name: filter([\n      `${formatIdx(idx + 1)}.`,\n      audio.type?.title && audio.author?.title ? `${audio.type?.title}.` : audio.type?.title,\n      audio.author?.title,\n      audio.type?.title || audio.author?.title ? `(${toUpper(audio.lang)})` : toUpper(audio.lang),\n      audio.codec !== 'aac' && toUpper(audio.codec),\n    ]).join(' '),\n  }));\n}\n\nexport function mapSources(\n  files: { url: string | { [key in Streaming]?: string }; quality?: string }[],\n  streamingType?: Streaming,\n): SourceTrack[] {\n  return orderBy(\n    map(files, (file) => {\n      const src = (typeof file.url === 'string' ? file.url : file.url[streamingType!] || file.url.http!) as string;\n\n      return {\n        src,\n        name: file.quality!,\n        type: src.includes('.m3u8') ? 'application/x-mpegURL' : 'video/mp4',\n      };\n    }),\n    ({ name }) => parseInt(name),\n    'desc',\n  );\n}\n\nexport function mapSubtitles(subtitles: Subtitle[]): SubtitleTrack[] {\n  return map(subtitles, (subtitle, idx) => ({\n    src: subtitle.url,\n    lang: subtitle.lang,\n    name: `${toUpper(subtitle.lang)} #${formatIdx(idx + 1)}`,\n  }));\n}\n","class WebVTTConverter {\n  resource: Blob;\n\n  private objectURL?: string;\n\n  constructor(resource: Blob) {\n    this.resource = resource;\n  }\n\n  blobToBuffer() {\n    return new Promise<ArrayBuffer>((resolve, reject) => {\n      const reader = new FileReader();\n      reader.addEventListener('loadend', (event) => {\n        const buf = event.target?.result;\n        resolve(new Uint8Array(buf as ArrayBuffer));\n      });\n      reader.addEventListener('error', () => reject('Error while reading the Blob object'));\n      reader.readAsArrayBuffer(this.resource);\n    });\n  }\n\n  static blobToString(blob: Blob, success: (text: string) => void, fail: () => void) {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', (event) => {\n      const text = event.target?.result;\n      success(text as string);\n    });\n    reader.addEventListener('error', () => fail());\n    reader.readAsText(blob);\n  }\n\n  /**\n   * @param {*} utf8str\n   */\n  static toVTT(utf8str: string) {\n    return utf8str\n      .replace(/\\{\\\\([ibu])\\}/g, '</$1>')\n      .replace(/\\{\\\\([ibu])1\\}/g, '<$1>')\n      .replace(/\\{([ibu])\\}/g, '<$1>')\n      .replace(/\\{\\/([ibu])\\}/g, '</$1>')\n      .replace(/(\\d\\d:\\d\\d:\\d\\d),(\\d\\d\\d)/g, '$1.$2')\n      .concat('\\r\\n\\r\\n');\n  }\n\n  static toTypedArray(str: string) {\n    const result: number[] = [];\n    str.split('').forEach((each) => {\n      result.push(parseInt(`${each.charCodeAt(0)}`, 16));\n    });\n    return Uint8Array.from(result);\n  }\n\n  getURL() {\n    return new Promise<string>((resolve, reject) => {\n      if (!(this.resource instanceof Blob)) return reject('Expecting resource to be a Blob but something else found.');\n      if (!FileReader) return reject('No FileReader constructor found');\n      if (!TextDecoder) return reject('No TextDecoder constructor found');\n      return WebVTTConverter.blobToString(\n        this.resource,\n        (decoded) => {\n          const vttString = 'WEBVTT FILE\\r\\n\\r\\n';\n          const text = vttString.concat(WebVTTConverter.toVTT(decoded));\n          const blob = new Blob([text], { type: 'text/vtt' });\n          this.objectURL = URL.createObjectURL(blob);\n\n          return resolve(this.objectURL);\n        },\n        () => {\n          this.blobToBuffer().then((buffer) => {\n            const utf8str = new TextDecoder('utf-8').decode(buffer);\n            const vttString = 'WEBVTT FILE\\r\\n\\r\\n';\n            const text = vttString.concat(WebVTTConverter.toVTT(utf8str));\n            const blob = new Blob([text], { type: 'text/vtt' });\n            this.objectURL = URL.createObjectURL(blob);\n\n            return resolve(this.objectURL);\n          });\n        },\n      );\n    });\n  }\n\n  release() {\n    URL.createObjectURL(this.objectURL);\n  }\n}\n\nexport async function convertToVTT(src: string) {\n  const file = await (await fetch(src)).blob();\n  const converter = new WebVTTConverter(file);\n\n  return converter.getURL();\n}\n","import React, { useCallback, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport cx from 'classnames';\nimport HLS from 'hls.js';\nimport find from 'lodash/find';\nimport forEach from 'lodash/forEach';\nimport uniqBy from 'lodash/uniqBy';\n\nimport useStorageState from 'hooks/useStorageState';\n\nimport { convertToVTT } from 'utils/subtitles';\n\nexport type AudioTrack = {\n  name: string;\n  lang: string;\n};\n\nexport type SourceTrack = {\n  src: string;\n  type: string;\n  name: string;\n};\n\nexport type SubtitleTrack = {\n  src: string;\n  name: string;\n  lang: string;\n};\n\nexport type StreamingType = 'http' | 'hls' | 'hls2' | 'hls4';\n\ntype OwnProps = {\n  autoPlay?: boolean;\n  audioTracks?: AudioTrack[];\n  sourceTracks?: SourceTrack[];\n  subtitleTracks?: SubtitleTrack[];\n  streamingType?: StreamingType;\n  isSettingsOpen?: boolean;\n  onUpdate?: () => void;\n  mediaComponent?: string;\n};\n\nexport type MediaRef = {\n  play: () => Promise<void>;\n  pause: () => void;\n  playPause: () => Promise<void>;\n  load: () => void;\n  currentTime: number;\n  playbackRate: number;\n  audioTracks?: AudioTrack[];\n  audioTrack?: string;\n  sourceTracks?: SourceTrack[];\n  sourceTrack?: string;\n  subtitleTracks?: SubtitleTrack[];\n  subtitleTrack?: string;\n  readonly duration: number;\n  readonly error: boolean;\n  readonly loading: boolean;\n  readonly paused: boolean;\n  readonly proportionLoaded: number;\n  readonly proportionPlayed: number;\n};\n\nfunction useVideoPlayer({ autoPlay, audioTracks, sourceTracks, subtitleTracks, streamingType, isSettingsOpen }: OwnProps) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const hlsRef = useRef<HLS | null>(null);\n  const startTimeRef = useRef(0);\n  const isSettingsOpenRef = useRef(false);\n  const [isHLSJSActive] = useStorageState<boolean>('is_hls.js_active');\n  const [currentAudioTrack, setCurrentAudioTrack] = useState<AudioTrack>(audioTracks?.[0]!);\n  const [currentSourceTrack, setCurrentSourceTrack] = useState<SourceTrack>(sourceTracks?.[0]!);\n  const [currentSubtitleTrack, setCurrentSubtitleTrack] = useState<SubtitleTrack | null>(null);\n\n  const getAudioTracks = useCallback(() => (streamingType === 'hls2' ? [] : audioTracks), [audioTracks, streamingType]);\n  const getAudioTrack = useCallback(() => currentAudioTrack?.name, [currentAudioTrack]);\n  const setAudioTrack = useCallback(\n    (audioTrackName: string) => {\n      const audioTrack = audioTracks?.find((audioTrack) => audioTrack.name === audioTrackName);\n      if (audioTrack) {\n        setCurrentAudioTrack(audioTrack);\n      }\n    },\n    [audioTracks],\n  );\n  const getSourceTracks = useCallback(() => uniqBy(sourceTracks, 'src'), [sourceTracks]);\n  const getSourceTrack = useCallback(() => currentSourceTrack?.name, [currentSourceTrack]);\n  const setSourceTrack = useCallback(\n    (sourceTrackName: string) => {\n      const sourceTrack = sourceTracks?.find((sourceTrack) => sourceTrack.name === sourceTrackName);\n      if (sourceTrack) {\n        setCurrentSourceTrack(sourceTrack);\n      }\n    },\n    [sourceTracks],\n  );\n  const getSubtitleTracks = useCallback(() => subtitleTracks, [subtitleTracks]);\n  const getSubtitleTrack = useCallback(() => currentSubtitleTrack?.name, [currentSubtitleTrack]);\n  const setSubtitleTrack = useCallback(\n    (subtitleTrackName?: string) => {\n      const subtitleTrack = subtitleTracks?.find((subtitleTrack) => subtitleTrack.name === subtitleTrackName);\n      setCurrentSubtitleTrack(subtitleTrack || null);\n    },\n    [subtitleTracks],\n  );\n\n  const currentAudioTrackIndex = useMemo(\n    () => audioTracks?.findIndex((audioTrack) => audioTrack.name === currentAudioTrack.name) ?? 0,\n    [audioTracks, currentAudioTrack],\n  );\n  const currentSrc = useMemo(\n    () =>\n      streamingType === 'hls'\n        ? currentSourceTrack?.src.replace(/master-v1a\\d/, `master-v1a${currentAudioTrackIndex + 1}`)\n        : currentSourceTrack?.src,\n    [streamingType, currentAudioTrackIndex, currentSourceTrack?.src],\n  );\n\n  const handleMediaLoaded = useCallback(() => {\n    if (videoRef.current) {\n      videoRef.current.removeEventListener('canplay', handleMediaLoaded);\n\n      // clear existing subtitles\n      while (videoRef.current.firstChild) {\n        // @ts-expect-error\n        videoRef.current.lastChild.track.mode = 'disabled';\n        videoRef.current.removeChild(videoRef.current.lastChild!);\n      }\n\n      if (hlsRef.current) {\n        const audioTrack = find(hlsRef.current.audioTracks, (audioTrack) => audioTrack.name === currentAudioTrack?.name);\n\n        if (audioTrack) {\n          hlsRef.current.audioTrack = audioTrack.id;\n        }\n      } else {\n        // Do not change audio if we don't have it (mostly on HLS)\n        // @ts-expect-error\n        if (videoRef.current.audioTracks[currentAudioTrackIndex]) {\n          // @ts-expect-error\n          forEach(videoRef.current.audioTracks, (audioTrack, idx: number) => {\n            audioTrack.enabled = idx === currentAudioTrackIndex;\n          });\n        }\n      }\n\n      if (startTimeRef.current > 0) {\n        videoRef.current.currentTime = startTimeRef.current;\n\n        if (isSettingsOpenRef.current) {\n          videoRef.current.pause();\n        } else {\n          videoRef.current.play();\n        }\n      } else if (autoPlay) {\n        videoRef.current.play();\n      }\n\n      if (currentSubtitleTrack) {\n        const addSubtitleTrack = (src: string) => {\n          if (videoRef.current) {\n            const track = document.createElement('track');\n            videoRef.current.appendChild(track);\n\n            track.src = src;\n            track.kind = 'captions';\n            track.id = currentSubtitleTrack.name;\n            track.label = currentSubtitleTrack.name;\n            track.srclang = currentSubtitleTrack.lang;\n\n            track.track.mode = 'showing';\n          }\n        };\n\n        if (currentSubtitleTrack.src.endsWith('.srt')) {\n          convertToVTT(currentSubtitleTrack.src).then(addSubtitleTrack);\n        } else {\n          addSubtitleTrack(currentSubtitleTrack.src);\n        }\n      }\n    }\n  }, [autoPlay, currentAudioTrackIndex, currentAudioTrack?.name, currentSubtitleTrack]);\n\n  useEffect(() => {\n    if (videoRef.current) {\n      if (isHLSJSActive && currentSrc.includes('.m3u8') && HLS.isSupported()) {\n        const hls = (hlsRef.current = new HLS({\n          enableWebVTT: false,\n          enableCEA708Captions: false,\n        }));\n        hls.attachMedia(videoRef.current);\n        hls.on(HLS.Events.MEDIA_ATTACHED, () => {\n          hls.loadSource(currentSrc);\n        });\n      } else {\n        videoRef.current.src = currentSrc;\n      }\n\n      videoRef.current.addEventListener('canplay', handleMediaLoaded);\n    }\n\n    return () => {\n      if (videoRef.current) {\n        if (videoRef.current.currentTime > 0) {\n          // eslint-disable-next-line\n          startTimeRef.current = videoRef.current.currentTime;\n        }\n        // eslint-disable-next-line\n        videoRef.current.removeEventListener('canplay', handleMediaLoaded);\n      }\n      if (hlsRef.current) {\n        hlsRef.current.destroy();\n        hlsRef.current = null;\n      }\n    };\n  }, [\n    currentSrc,\n    videoRef,\n    startTimeRef,\n    handleMediaLoaded,\n    isHLSJSActive,\n    streamingType,\n    currentAudioTrack,\n    currentSourceTrack,\n    currentSubtitleTrack,\n    currentAudioTrackIndex,\n    audioTracks,\n  ]);\n\n  useEffect(() => {\n    isSettingsOpenRef.current = Boolean(isSettingsOpen);\n  }, [isSettingsOpen]);\n\n  return useMemo(\n    () => ({\n      videoRef: videoRef,\n      getAudioTracks,\n      getAudioTrack,\n      setAudioTrack,\n      getSourceTracks,\n      getSourceTrack,\n      setSourceTrack,\n      getSubtitleTracks,\n      getSubtitleTrack,\n      setSubtitleTrack,\n    }),\n    [\n      videoRef,\n      getAudioTracks,\n      getAudioTrack,\n      setAudioTrack,\n      getSourceTracks,\n      getSourceTrack,\n      setSourceTrack,\n      getSubtitleTracks,\n      getSubtitleTrack,\n      setSubtitleTrack,\n    ],\n  );\n}\n\nfunction useVideoPlayerApi(ref: React.ForwardedRef<MediaRef>, props: OwnProps) {\n  const player = useVideoPlayer(props);\n  const videoRef = player.videoRef;\n\n  const getCurrentTime = useCallback(() => {\n    if (videoRef.current) {\n      return videoRef.current.currentTime;\n    }\n    return 0;\n  }, [videoRef]);\n  const setCurrentTime = useCallback(\n    (currentTime: number) => {\n      if (videoRef.current) {\n        videoRef.current.currentTime = currentTime;\n      }\n    },\n    [videoRef],\n  );\n  const getPlaybackRate = useCallback(() => {\n    if (videoRef.current) {\n      return videoRef.current.playbackRate;\n    }\n    return 1;\n  }, [videoRef]);\n  const setPlaybackRate = useCallback(\n    (playbackRate: number) => {\n      if (videoRef.current) {\n        videoRef.current.playbackRate = playbackRate;\n      }\n    },\n    [videoRef],\n  );\n  const getPaused = useCallback(() => {\n    if (videoRef.current) {\n      return videoRef.current.paused;\n    }\n    return false;\n  }, [videoRef]);\n  const getDuration = useCallback(() => {\n    if (videoRef.current) {\n      return videoRef.current.duration;\n    }\n    return 0;\n  }, [videoRef]);\n  const getError = useCallback(() => {\n    if (videoRef.current) {\n      return videoRef.current.networkState === videoRef.current.NETWORK_NO_SOURCE;\n    }\n    return false;\n  }, [videoRef]);\n  const getLoading = useCallback(() => {\n    if (videoRef.current) {\n      return videoRef.current.readyState < videoRef.current.HAVE_ENOUGH_DATA;\n    }\n    return true;\n  }, [videoRef]);\n  const getProportionLoaded = useCallback(() => {\n    if (videoRef.current) {\n      return (\n        videoRef.current.buffered.length && videoRef.current.buffered.end(videoRef.current.buffered.length - 1) / videoRef.current.duration\n      );\n    }\n    return 0;\n  }, [videoRef]);\n  const getProportionPlayed = useCallback(() => {\n    if (videoRef.current) {\n      return videoRef.current.currentTime / videoRef.current.duration;\n    }\n    return 0;\n  }, [videoRef]);\n  const play = useCallback(async () => {\n    await videoRef.current?.play();\n  }, [videoRef]);\n  const pause = useCallback(() => {\n    videoRef.current?.pause();\n  }, [videoRef]);\n  const playPause = useCallback(async () => {\n    if (getPaused()) {\n      await play();\n    } else {\n      pause();\n    }\n  }, [play, pause, getPaused]);\n  const load = useCallback(() => {\n    videoRef.current?.load();\n  }, [videoRef]);\n\n  const api = useMemo<MediaRef>(\n    () => ({\n      play,\n      pause,\n      playPause,\n      load,\n      get currentTime() {\n        return getCurrentTime();\n      },\n      set currentTime(currentTime) {\n        setCurrentTime(currentTime);\n      },\n      get audioTracks() {\n        return player.getAudioTracks();\n      },\n      get audioTrack() {\n        return player.getAudioTrack();\n      },\n      set audioTrack(audioTrack) {\n        player.setAudioTrack(audioTrack);\n      },\n      get sourceTracks() {\n        return player.getSourceTracks();\n      },\n      get sourceTrack() {\n        return player.getSourceTrack();\n      },\n      set sourceTrack(sourceTrack) {\n        player.setSourceTrack(sourceTrack);\n      },\n      get subtitleTracks() {\n        return player.getSubtitleTracks();\n      },\n      get subtitleTrack() {\n        return player.getSubtitleTrack();\n      },\n      set subtitleTrack(subtitleTrack) {\n        player.setSubtitleTrack(subtitleTrack);\n      },\n      get playbackRate() {\n        return getPlaybackRate();\n      },\n      set playbackRate(playbackRate) {\n        setPlaybackRate(playbackRate);\n      },\n      get paused() {\n        return getPaused();\n      },\n      get duration() {\n        return getDuration();\n      },\n      get error() {\n        return getError();\n      },\n      get loading() {\n        return getLoading();\n      },\n      get proportionLoaded() {\n        return getProportionLoaded();\n      },\n      get proportionPlayed() {\n        return getProportionPlayed();\n      },\n    }),\n    [\n      player,\n      play,\n      pause,\n      playPause,\n      load,\n      getCurrentTime,\n      setCurrentTime,\n      getPlaybackRate,\n      setPlaybackRate,\n      getPaused,\n      getDuration,\n      getError,\n      getLoading,\n      getProportionLoaded,\n      getProportionPlayed,\n    ],\n  );\n\n  useImperativeHandle(ref, () => api, [api]);\n\n  return useMemo(\n    () => ({\n      api,\n      player,\n    }),\n    [api, player],\n  );\n}\n\nconst MEDIA_EVENTS = [\n  'onAbort',\n  'onCanPlay',\n  'onCanPlayThrough',\n  'onDurationChange',\n  'onEmptied',\n  'onEncrypted',\n  'onEnded',\n  'onError',\n  'onLoadedData',\n  'onLoadedMetadata',\n  'onLoadStart',\n  'onPause',\n  'onPlay',\n  'onPlaying',\n  'onProgress',\n  'onRateChange',\n  'onSeeked',\n  'onSeeking',\n  'onStalled',\n  'onSuspend',\n  'onTimeUpdate',\n  'onVolumeChange',\n  'onWaiting',\n] as const;\n\ntype MediaEvents = keyof typeof MEDIA_EVENTS;\n\nexport type MediaProps = OwnProps & React.HTMLAttributes<HTMLVideoElement>;\n\nconst Media = React.forwardRef<MediaRef, MediaProps>(\n  (\n    { autoPlay, audioTracks, sourceTracks, subtitleTracks, streamingType, isSettingsOpen, onUpdate, className, mediaComponent, ...props },\n    ref,\n  ) => {\n    const handleUpdate = useCallback(() => {\n      onUpdate?.();\n    }, [onUpdate]);\n    const eventProps = useMemo(\n      () =>\n        MEDIA_EVENTS.reduce<Partial<Record<MediaEvents, Function>>>(\n          (result, event) => ({\n            ...result,\n            [event]: (...args: any[]) => {\n              handleUpdate();\n              // @ts-expect-error\n              props[event]?.(...args);\n            },\n          }),\n          {},\n        ),\n      [props, handleUpdate],\n    );\n    const { player } = useVideoPlayerApi(ref, { autoPlay, audioTracks, sourceTracks, subtitleTracks, streamingType, isSettingsOpen });\n\n    return <video {...props} {...eventProps} autoPlay={false} className={cx('w-screen h-screen', className)} ref={player.videoRef} />;\n  },\n);\n\nexport default Media;\n","import { useCallback, useEffect, useState } from 'react';\nimport { VideoPlayerBase } from '@enact/moonstone/VideoPlayer';\nimport map from 'lodash/map';\n\nimport { AudioTrack, SourceTrack, SubtitleTrack } from 'components/media';\nimport Popup from 'components/popup';\nimport Radio from 'components/radio';\nimport Text from 'components/text';\n\nconst NONE = 'NONE';\n\ntype Props = {\n  visible: boolean;\n  onClose: () => void;\n  player: React.MutableRefObject<VideoPlayerBase | undefined>;\n};\n\nconst Settings: React.FC<Props> = ({ visible, onClose, player }) => {\n  const [isOpen, setIsOpen] = useState(visible);\n  const [audios, setAudios] = useState<AudioTrack[]>([]);\n  const [currentAudio, setCurrentAudio] = useState<string | null>(null);\n  const [sources, setSources] = useState<SourceTrack[]>([]);\n  const [currentSource, setCurrentSource] = useState<string | null>(null);\n  const [subtitles, setSubtitles] = useState<SubtitleTrack[]>([]);\n  const [currentSubtitle, setCurrentSubtitle] = useState<string | null>(null);\n\n  const handleVideoUpdate = useCallback(\n    (name: string, value: string) => {\n      if (player.current) {\n        const video: any = player.current.getVideoNode();\n\n        video[name] = value;\n      }\n    },\n    [player],\n  );\n\n  const handleAudioChange = useCallback(\n    (audio: string) => () => {\n      setCurrentAudio(audio);\n      handleVideoUpdate('audioTrack', audio);\n    },\n    [handleVideoUpdate],\n  );\n  const handleSourceChange = useCallback(\n    (source: string) => () => {\n      setCurrentSource(source);\n      handleVideoUpdate('sourceTrack', source);\n    },\n    [handleVideoUpdate],\n  );\n  const handleSubtitleChange = useCallback(\n    (subtitle: string) => () => {\n      setCurrentSubtitle(subtitle);\n      handleVideoUpdate('subtitleTrack', subtitle);\n    },\n    [handleVideoUpdate],\n  );\n\n  const handleClose = useCallback(() => {\n    onClose();\n  }, [onClose]);\n\n  useEffect(() => {\n    if (visible && player.current) {\n      const video: any = player.current.getVideoNode();\n      const { audioTracks, audioTrack, sourceTracks, sourceTrack, subtitleTracks, subtitleTrack } = video;\n\n      if (audioTracks?.length > 1 || sourceTracks?.length > 1 || subtitleTracks?.length > 0) {\n        setAudios(audioTracks);\n        setCurrentAudio(audioTrack);\n\n        setSources(sourceTracks);\n        setCurrentSource(sourceTrack);\n\n        setSubtitles(subtitleTracks);\n        setCurrentSubtitle(subtitleTrack);\n      } else {\n        handleClose();\n      }\n    }\n  }, [visible, player, handleClose]);\n\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n\n    if (visible) {\n      timeoutId = setTimeout(() => {\n        setIsOpen(true);\n      }, 100);\n    } else {\n      setIsOpen(false);\n    }\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [visible]);\n\n  return (\n    <Popup visible={isOpen} onClose={handleClose}>\n      <div className=\"flex flex-col\">\n        {audios?.length > 1 && (\n          <div className=\"flex flex-col py-4\">\n            <Text>Звук</Text>\n\n            <div className=\"flex flex-wrap mt-2\">\n              {map(audios, ({ name: audio }) => (\n                <div key={audio} className=\"w-1/2\">\n                  <Radio checked={audio === currentAudio} onChange={handleAudioChange(audio)}>\n                    {audio}\n                  </Radio>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        {sources?.length > 1 && (\n          <div className=\"flex flex-col py-4\">\n            <Text>Качество</Text>\n\n            <div className=\"flex flex-wrap mt-2\">\n              {map(sources, ({ name: source }) => (\n                <div key={source} className=\"w-1/6\">\n                  <Radio checked={source === currentSource} onChange={handleSourceChange(source)}>\n                    {source}\n                  </Radio>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        {subtitles?.length > 0 && (\n          <div className=\"flex flex-col py-4\">\n            <Text>Субтитры</Text>\n\n            <div className=\"flex flex-wrap mt-2\">\n              <div className=\"w-1/6\">\n                <Radio checked={!currentSubtitle || currentSubtitle === NONE} onChange={handleSubtitleChange(NONE)}>\n                  Нет\n                </Radio>\n              </div>\n\n              {map(subtitles, ({ name: subtitle }) => (\n                <div key={subtitle} className=\"w-1/6\">\n                  <Radio checked={subtitle === currentSubtitle} onChange={handleSubtitleChange(subtitle)}>\n                    {subtitle}\n                  </Radio>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </Popup>\n  );\n};\n\nexport default Settings;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { VideoPlayerBase } from '@enact/moonstone/VideoPlayer';\n\nimport Button from 'components/button';\n\ntype Props = {\n  player: React.MutableRefObject<VideoPlayerBase | undefined>;\n  startTime?: number;\n  startInDelay?: number;\n};\n\nconst StartFrom: React.FC<Props> = ({ startTime, startInDelay = 5, player }) => {\n  const [visible, setVisible] = useState(true);\n  const [startIn, setStartIn] = useState(startInDelay);\n  const startFrom = useMemo(() => new Date((startTime || 0) * 1000).toISOString().substr(11, 8).replace(/^00:/, ''), [startTime]);\n\n  const handleStartFromClick = useCallback(() => {\n    if (player.current) {\n      setVisible(false);\n      const video: any = player.current.getVideoNode();\n\n      video.currentTime = startTime;\n    }\n  }, [startTime, player]);\n  const handleStartFromBeginingClick = useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout;\n\n    if (visible) {\n      intervalId = setInterval(() => {\n        setStartIn((prevStartIn) => {\n          const newStartIn = prevStartIn - 1;\n\n          if (newStartIn <= 0) {\n            handleStartFromClick();\n          }\n\n          return newStartIn;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [visible, handleStartFromClick]);\n\n  if (!startTime || !visible) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex justify-center absolute w-full z-101 bottom-32\">\n      <Button onClick={handleStartFromClick}>\n        Смотреть с {startFrom} через {startIn}\n      </Button>\n      <Button autoFocus onClick={handleStartFromBeginingClick}>\n        Смотреть с начала\n      </Button>\n    </div>\n  );\n};\n\nexport default StartFrom;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport VideoPlayer, { VideoPlayerBase, VideoPlayerBaseProps } from '@enact/moonstone/VideoPlayer';\n\nimport Button from 'components/button';\nimport Media, { AudioTrack, SourceTrack, StreamingType, SubtitleTrack } from 'components/media';\nimport Text from 'components/text';\nimport useButtonEffect from 'hooks/useButtonEffect';\n\nimport Settings from './settings';\nimport StartFrom from './startFrom';\n\nexport type PlayerProps = {\n  title: string;\n  description?: string;\n  poster: string;\n  audios?: AudioTrack[];\n  sources: SourceTrack[];\n  subtitles?: SubtitleTrack[];\n  startTime?: number;\n  timeSyncInterval?: number;\n  streamingType?: StreamingType;\n  onPlay?: () => void;\n  onPause?: (currentTime: number) => void;\n  onEnded?: (currentTime: number) => void;\n  onTimeSync?: (currentTime: number) => void | Promise<void>;\n} & VideoPlayerBaseProps;\n\nconst Player: React.FC<PlayerProps> = ({\n  title,\n  description,\n  poster,\n  audios,\n  sources,\n  subtitles,\n  startTime,\n  timeSyncInterval = 30,\n  streamingType,\n  onPlay,\n  onPause,\n  onEnded,\n  onTimeSync,\n  ...props\n}) => {\n  const playerRef = useRef<VideoPlayerBase>();\n  const [isPaused, setIsPaused] = useState(true);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n\n  const handlePlay = useCallback(() => {\n    setIsPaused(false);\n    setIsSettingsOpen(false);\n    onPlay?.();\n  }, [onPlay]);\n  const handlePause = useCallback(\n    (e) => {\n      setIsPaused(true);\n      onPause?.(e.currentTime);\n    },\n    [onPause],\n  );\n  const handleEnded = useCallback(\n    (e) => {\n      onEnded?.(e.target.currentTime);\n    },\n    [onEnded],\n  );\n  const handleTimeSync = useCallback(async () => {\n    if (playerRef.current && onTimeSync) {\n      const video: any = playerRef.current.getVideoNode();\n\n      const currentTime = video['currentTime'];\n\n      await onTimeSync(currentTime);\n    }\n  }, [onTimeSync, playerRef]);\n  const handleLoadedMetadata = useCallback(() => {\n    setIsLoaded(true);\n  }, []);\n  const handleSettingsOpen = useCallback(() => {\n    if (playerRef.current) {\n      setIsSettingsOpen(true);\n\n      const video: any = playerRef.current.getVideoNode();\n      video.pause();\n    }\n  }, [playerRef]);\n  const handleSettingsClose = useCallback(() => {\n    if (playerRef.current) {\n      setIsSettingsOpen(false);\n\n      const video: any = playerRef.current.getVideoNode();\n      video.play();\n    }\n  }, []);\n  const handlePauseButton = useCallback(() => {\n    if (playerRef.current) {\n      const video: any = playerRef.current.getVideoNode();\n      video.pause();\n    }\n  }, [playerRef]);\n\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n\n    if (isPaused) {\n      timeoutId = setTimeout(() => {\n        setIsPaused(false);\n      }, 5 * 1000);\n    }\n\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, [isPaused]);\n\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout;\n\n    if (onTimeSync) {\n      intervalId = setInterval(handleTimeSync, timeSyncInterval * 1000);\n    }\n\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [timeSyncInterval, onTimeSync, handleTimeSync]);\n\n  useButtonEffect('Back', handleTimeSync);\n  useButtonEffect('Blue', handleSettingsOpen);\n  useButtonEffect('Play', handleSettingsClose);\n  useButtonEffect('Pause', handlePauseButton);\n  useButtonEffect('ArrowUp', handleSettingsOpen);\n\n  return (\n    <>\n      <Settings visible={isSettingsOpen} onClose={handleSettingsClose} player={playerRef} />\n      {isPaused && <Text className=\"absolute z-10 top-0 p-4\">{title}</Text>}\n      {isPaused && (\n        <Button className=\"absolute z-101 bottom-8 right-10 text-blue-600\" icon=\"settings\" iconOnly onClick={handleSettingsOpen} />\n      )}\n      {isLoaded && startTime! > 0 && <StartFrom startTime={startTime} player={playerRef} />}\n\n      <VideoPlayer\n        {...props}\n        //@ts-expect-error\n        ref={playerRef}\n        poster={poster}\n        title={description}\n        onPlay={handlePlay}\n        onPause={handlePause}\n        onEnded={handleEnded}\n        onLoadedMetadata={handleLoadedMetadata}\n        streamingType={streamingType}\n        isSettingsOpen={isSettingsOpen}\n        audioTracks={audios}\n        sourceTracks={sources}\n        subtitleTracks={subtitles}\n        videoComponent={<Media />}\n      />\n    </>\n  );\n};\n\nexport default Player;\n"],"sourceRoot":""}