{"version":3,"sources":["hooks/useApi.ts","components/text/text.tsx","components/button/button.tsx","views/speed/speed.tsx"],"names":["useApi","method","params","options","client","useMemo","ApiClient","useQuery","Text","styled","BodyText","StyledButton","EnactButton","ButtonInner","div","Icon","props","iconOnly","Button","icon","children","name","Locations","Location","Actions","updateSpeedReducer","state","action","type","payload","SpeedView","data","useReducer","speed","setSpeed","useState","started","setStarted","servers","map","items","location","server","dlURL","ulURL","pingURL","getIpURL","workers","worker","window","_settings","test_order","setSelectedServer","onupdate","testState","dlStatus","currentWorkerIndex","setCurrentWorkerIndex","handleStart","useCallback","handleStop","useEffect","onend","_state","start","abort","script","document","createElement","src","async","head","appendChild","removeChild","id","onClick"],"mappings":"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","file":"static/js/26.8c6320c2.chunk.js","sourcesContent":["import { useMemo } from 'react';\nimport { UseQueryOptions, useQuery } from 'react-query';\n\nimport ApiClient from 'api';\n\ntype Unpromise<T> = T extends Promise<infer U> ? U : T;\n\nexport type Methods = {\n  [method in keyof ApiClient]: ApiClient[method] extends Function ? Unpromise<ReturnType<ApiClient[method]>> : never;\n};\n\nexport type Method = keyof ApiClient & string;\n\nfunction useApi<T extends Method>(method: T, params?: Parameters<ApiClient[T]>, options?: UseQueryOptions<Methods[T]>) {\n  const client = useMemo(() => new ApiClient(), []);\n  const query = useQuery<Methods[T]>(\n    [method, ...(params || [])],\n    () =>\n      // @ts-expect-error\n      client[method](...params) as Methods[T],\n    options,\n  );\n\n  return query;\n}\n\nexport default useApi;\n","import BodyText from '@enact/moonstone/BodyText';\nimport styled from 'styled-components';\n\nconst Text = styled(BodyText)``;\n\nexport default Text;\n","import EnactButton, { ButtonProps } from '@enact/moonstone/Button';\nimport styled from 'styled-components';\n\nimport Icon from 'components/icon';\n\nconst StyledButton = styled(EnactButton)`\n  color: inherit;\n  text-decoration: none;\n`;\n\nconst ButtonInner = styled.div<{ iconOnly?: boolean }>`\n  display: flex;\n  align-items: center;\n  color: inherit;\n  text-decoration: none;\n\n  ${Icon} {\n    margin-right: ${(props) => !props.iconOnly && '0.5rem'};\n  }\n`;\n\ntype Props = {\n  icon?: string;\n  iconOnly?: boolean;\n  onClick?: React.MouseEventHandler;\n} & ButtonProps;\n\nconst Button: React.FC<Props> = ({ icon, iconOnly, children, ...props }) => {\n  return (\n    <StyledButton {...props}>\n      <ButtonInner iconOnly={iconOnly}>\n        {icon && <Icon name={icon} />}\n        {!iconOnly && children}\n      </ButtonInner>\n    </StyledButton>\n  );\n};\n\nexport default Button;\n","import React, { useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport map from 'lodash/map';\nimport styled from 'styled-components';\n\nimport Button from 'components/button';\nimport Text from 'components/text';\nimport useApi from 'hooks/useApi';\n\nconst Locations = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst Location = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Actions = styled.div`\n  padding-top: 3rem;\n  display: flex;\n  justify-content: center;\n`;\n\nfunction updateSpeedReducer(state: { [location: string]: string }, action: { type: string; payload: string }) {\n  return {\n    ...state,\n    [action.type]: action.payload,\n  };\n}\n\nconst SpeedView: React.FC = () => {\n  const { data } = useApi('serverLocations');\n  const [speed, setSpeed] = useReducer(updateSpeedReducer, {});\n  const [started, setStarted] = useState(false);\n\n  const servers = useMemo(\n    () =>\n      map(data?.items, ({ name, location }) => ({\n        name,\n        location,\n        server: `https://${location}-speed.streambox.in`,\n        dlURL: `/garbage.php`,\n        ulURL: `/empty.php`,\n        pingURL: `/empty.php`,\n        getIpURL: `/getIP.php`,\n      })),\n    [data?.items],\n  );\n  const workers = useMemo(\n    () =>\n      map(servers, (server) => {\n        // @ts-expect-error\n        const worker = new window['Speedtest']();\n\n        worker._settings.test_order = 'IP_D';\n\n        worker.setSelectedServer(server);\n\n        worker.onupdate = ({ testState, dlStatus }: { testState: number; dlStatus: string }) => {\n          setSpeed({\n            type: server.location,\n            payload: dlStatus || ((testState === 1 || testState === 2) && 'Начинаем') || '',\n          });\n        };\n\n        return worker;\n      }),\n    [servers, setSpeed],\n  );\n  const [currentWorkerIndex, setCurrentWorkerIndex] = useState(0);\n\n  const handleStart = useCallback(() => {\n    setStarted(true);\n    setCurrentWorkerIndex(0);\n  }, []);\n\n  const handleStop = useCallback(() => {\n    setStarted(false);\n  }, []);\n\n  useEffect(() => {\n    if (workers[currentWorkerIndex]) {\n      if (started) {\n        workers[currentWorkerIndex].onend = () => {\n          setCurrentWorkerIndex(currentWorkerIndex + 1);\n        };\n\n        if (workers[currentWorkerIndex]._state !== 3) {\n          workers[currentWorkerIndex].start();\n        }\n      } else {\n        if (workers[currentWorkerIndex]._state === 3) {\n          workers[currentWorkerIndex].abort();\n        }\n      }\n    } else {\n      handleStop();\n    }\n  }, [started, workers, currentWorkerIndex, handleStop]);\n\n  useEffect(() => {\n    return () => {\n      handleStop();\n    };\n  }, [handleStop]);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = './speedtest.js';\n    script.async = true;\n\n    document.head.appendChild(script);\n\n    return () => {\n      document.head.removeChild(script);\n    };\n  }, []);\n\n  return (\n    <>\n      <Text>Проверка скорости</Text>\n\n      <Locations>\n        {map(data?.items, (location) => (\n          <Location key={location.id}>\n            <Text>{location.name}</Text>\n            {speed[location.location] || '0.00'}\n            <Text>Mbit/s</Text>\n          </Location>\n        ))}\n      </Locations>\n\n      <Actions>\n        {started ? (\n          <Button icon=\"stop\" onClick={handleStop}>\n            Стоп\n          </Button>\n        ) : (\n          <Button icon=\"play_arrow\" onClick={handleStart}>\n            Начать\n          </Button>\n        )}\n      </Actions>\n    </>\n  );\n};\n\nexport default SpeedView;\n"],"sourceRoot":""}