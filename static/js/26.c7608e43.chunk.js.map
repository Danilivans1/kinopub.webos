{"version":3,"sources":["components/text/text.tsx","hooks/useApi.ts","components/button/button.tsx","views/settings/settings.tsx"],"names":["Text","styled","BodyText","useApi","method","params","options","client","useMemo","ApiClient","query","useQuery","StyledButton","EnactButton","ButtonInner","div","Icon","props","iconOnly","Button","icon","children","name","Content","Settings","Setting","User","SettingBool","setting","onToggle","defaultSelected","value","Bool","True","label","SettingList","onSelect","findIndex","selected","title","select","closeOnSelect","map","description","SettingsView","data","deviceInfo","saveDeviceSettingsAsync","useApiMutation","deactivate","useState","newSettings","setNewSettings","boolSettings","filter","device","settings","key","listSettings","handleBoolSettingToggle","useCallback","a","handleListSettingSelect","id","handleSaveClick","window","location","reload","handleLogoutClick","updated","onClick","user","profile","username","Math","floor","subscription","days"],"mappings":"iMAKeA,EAFFC,YAAOC,IAAPD,CAAH,2B,sEC2BKE,IAjBf,SACEC,GAGC,IAFDC,EAEA,uDAFmC,GACnCC,EACA,uCACMC,EAASC,mBAAQ,kBAAM,IAAIC,MAAa,IACxCC,EAAQC,YAAQ,CACnBP,GADmB,mBACRC,KACZ,kBAEEE,EAAOH,GAAP,MAAAG,EAAM,YAAYF,MACpBC,GAGF,OAAOI,I,4ICtBHE,EAAeX,YAAOY,IAAPZ,CAAH,yEAKZa,EAAcb,IAAOc,IAAV,0JAMbC,KACgB,SAACC,GAAD,OAAYA,EAAMC,UAAY,YAqBnCC,EAXiB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMF,EAAmC,EAAnCA,SAAUG,EAAyB,EAAzBA,SAAaJ,EAAY,8CAC1E,OACE,cAACL,EAAD,2BAAkBK,GAAlB,aACE,eAACH,EAAD,CAAaI,SAAUA,EAAvB,UACGE,GAAQ,cAAC,IAAD,CAAME,KAAMF,KACnBF,GAAYG,U,iTClBhBE,EAAUtB,IAAOc,IAAV,6HAOPS,EAAWvB,IAAOc,IAAV,2FAMRU,EAAUxB,IAAOc,IAAV,mGAMPW,EAAOzB,IAAOc,IAAV,+GAINf,KAKE2B,EAAgF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAChG,OACE,cAAC,IAAD,CAAcC,gBAAiBF,EAAQG,QAAUC,IAAKC,KAAMJ,SAAUA,EAAtE,SACGD,EAAQM,SAKTC,EAA6E,SAAC,GAA2B,IAAzBP,EAAwB,EAAxBA,QAASQ,EAAe,EAAfA,SAC7F,OACE,cAAC,IAAD,CAEEN,gBAAiBO,IAAUT,EAAQG,OAAO,SAACA,GAAD,OAAWA,EAAMO,WAAaN,IAAKC,QAC7EM,MAAOX,EAAQM,MACfM,OAAO,QACPJ,SAAUA,EACVK,eAAa,EANf,SAQGC,IAAId,EAAQG,OAAO,SAACA,GAAD,gBAAcA,EAAMG,MAApB,YAA6BH,EAAMY,YAAN,WAAwBZ,EAAMY,YAA9B,KAA+C,UAuGvFC,EAlGgB,WAAO,IAAD,IAC3BC,EAAS1C,YAAO,QAAhB0C,KACMC,EAAe3C,YAAO,cAA5B0C,KACAE,EAA4BC,YAAe,sBAA3CD,wBACAE,EAAeD,YAAe,cAA9BC,WAJ2B,EAKGC,mBAA+B,IALlC,mBAK5BC,EAL4B,KAKfC,EALe,KAO7BC,EAAe7C,mBACnB,wBACE8C,IACEZ,IAAG,OAACI,QAAD,IAACA,GAAD,UAACA,EAAYS,cAAb,aAAC,EAAoBC,UAAU,SAAC5B,EAAS6B,GAAV,mBAAC,eAAuB7B,GAAxB,IAAiC6B,YACnE,SAAC7B,GAAD,MAA8D,qBAApBA,EAAO,UAErD,QAACkB,QAAD,IAACA,GAAD,UAACA,EAAYS,cAAb,aAAC,EAAoBC,WAEjBE,EAAelD,mBACnB,wBACE8C,IACEZ,IAAG,OAACI,QAAD,IAACA,GAAD,UAACA,EAAYS,cAAb,aAAC,EAAoBC,UAAU,SAAC5B,EAAS6B,GAAV,mBAAC,eAAuB7B,GAAxB,IAAiC6B,YACnE,SAAC7B,GAAD,MAAoD,SAApBA,EAAO,UAE3C,QAACkB,QAAD,IAACA,GAAD,UAACA,EAAYS,cAAb,aAAC,EAAoBC,WAGjBG,EAA0BC,uBAC9B,SAAChC,GAAD,8CAAqC,6BAAAiC,EAAA,sDAASvB,EAAT,EAASA,SAC5Cc,EAAe,2BAAKD,GAAN,kBAAoBvB,EAAO,IAAUU,KADhB,2CAArC,wDAGA,CAACa,IAEGW,EAA0BF,uBAC9B,SAAChC,GAAD,OAAqC,YAAyC,IAAtCU,EAAqC,EAArCA,SACtCc,EAAe,2BAAKD,GAAN,kBAAoBvB,EAAO,IAAUA,EAAQG,MAAMO,GAAUyB,SAE7E,CAACZ,IAGGa,EAAkBJ,sBAAW,sBAAC,sBAAAC,EAAA,sEAC5Bd,EAAwB,QAACD,QAAD,IAACA,OAAD,EAACA,EAAYS,OAAOQ,GAAKZ,IADrB,OAGlCc,OAAOC,SAASC,SAHkB,2CAIjC,CAAChB,EAAD,OAAcL,QAAd,IAAcA,OAAd,EAAcA,EAAYS,OAAQR,IAC/BqB,EAAoBR,uBAAY,WACpCX,EAAW,MACV,CAACA,IAEJ,OACE,qCACE,cAAC,IAAD,kIAEA,eAAC1B,EAAD,YACa,OAAVuB,QAAU,IAAVA,OAAA,EAAAA,EAAYS,SACX,qCACE,gCACE,cAAC/B,EAAD,UACGkB,IAAIW,GAAc,SAACzB,GAAD,OACjB,cAACH,EAAD,UACE,cAAC,EAAD,CAAaG,QAASA,EAASC,SAAU8B,EAAwB/B,MADrDA,EAAO,SAFzB,sBAAuBkB,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAYS,OAAOc,UAO1C,cAAC7C,EAAD,UACGkB,IAAIgB,GAAc,SAAC9B,GAAD,OACjB,cAACH,EAAD,UACE,cAAC,EAAD,CAAaG,QAASA,EAASQ,SAAU0B,EAAwBlC,MADrDA,EAAO,SAFzB,sBAAuBkB,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAYS,OAAOc,aAS5C,8BACE,cAAC,IAAD,CAAQjD,KAAK,OAAOkD,QAASN,EAA7B,yEAON,gCACE,cAAC,IAAD,uFAEA,eAACtC,EAAD,YACO,OAAJmB,QAAI,IAAJA,OAAA,EAAAA,EAAM0B,OACL,eAAC,IAAD,WACG1B,EAAK0B,KAAKC,QAAQlD,MAAQuB,EAAK0B,KAAKE,SADvC,KACmDC,KAAKC,MAAM9B,EAAK0B,KAAKK,aAAaC,MADrF,qBAKF,cAAC,IAAD,CAAQzD,KAAK,SAASkD,QAASF,EAA/B","file":"static/js/26.c7608e43.chunk.js","sourcesContent":["import BodyText from '@enact/moonstone/BodyText';\nimport styled from 'styled-components';\n\nconst Text = styled(BodyText)``;\n\nexport default Text;\n","import { useMemo } from 'react';\nimport { UseQueryOptions, useQuery } from 'react-query';\n\nimport ApiClient from 'api';\n\ntype Unpromise<T> = T extends Promise<infer U> ? U : T;\n\nexport type Methods = {\n  [method in keyof ApiClient]: ApiClient[method] extends Function ? Unpromise<ReturnType<ApiClient[method]>> : never;\n};\n\nexport type Method = keyof ApiClient & string;\n\nfunction useApi<T extends Method>(\n  method: T,\n  params: Parameters<ApiClient[T]> = [] as Parameters<ApiClient[T]>,\n  options?: UseQueryOptions<Methods[T]>,\n) {\n  const client = useMemo(() => new ApiClient(), []);\n  const query = useQuery<Methods[T]>(\n    [method, ...params],\n    () =>\n      // @ts-expect-error\n      client[method](...params) as Methods[T],\n    options,\n  );\n\n  return query;\n}\n\nexport default useApi;\n","import EnactButton, { ButtonProps } from '@enact/moonstone/Button';\nimport styled from 'styled-components';\n\nimport Icon from 'components/icon';\n\nconst StyledButton = styled(EnactButton)`\n  color: inherit;\n  text-decoration: none;\n`;\n\nconst ButtonInner = styled.div<{ iconOnly?: boolean }>`\n  display: flex;\n  align-items: center;\n  color: inherit;\n  text-decoration: none;\n\n  ${Icon} {\n    margin-right: ${(props) => !props.iconOnly && '0.5rem'};\n  }\n`;\n\ntype Props = {\n  icon?: string;\n  iconOnly?: boolean;\n  onClick?: React.MouseEventHandler;\n} & ButtonProps;\n\nconst Button: React.FC<Props> = ({ icon, iconOnly, children, ...props }) => {\n  return (\n    <StyledButton {...props}>\n      <ButtonInner iconOnly={iconOnly}>\n        {icon && <Icon name={icon} />}\n        {!iconOnly && children}\n      </ButtonInner>\n    </StyledButton>\n  );\n};\n\nexport default Button;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport CheckboxItem from '@enact/moonstone/CheckboxItem';\nimport ExpandableList from '@enact/moonstone/ExpandableList';\nimport filter from 'lodash/filter';\nimport findIndex from 'lodash/findIndex';\nimport map from 'lodash/map';\nimport styled from 'styled-components';\n\nimport { Bool, DeviceSettingBoolean, DeviceSettingList, DeviceSettingsParams } from 'api';\nimport Button from 'components/button';\nimport Text from 'components/text';\nimport useApi from 'hooks/useApi';\nimport useApiMutation from 'hooks/useApiMutation';\n\nconst Content = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nconst Settings = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding-bottom: 2rem;\n`;\n\nconst Setting = styled.div`\n  flex-basis: 50%;\n  box-sizing: border-box;\n  padding-right: 1rem;\n`;\n\nconst User = styled.div`\n  display: flex;\n  align-items: center;\n\n  ${Text} {\n    padding-right: 2rem;\n  }\n`;\n\nconst SettingBool: React.FC<{ setting: DeviceSettingBoolean; onToggle?: Function }> = ({ setting, onToggle }) => {\n  return (\n    <CheckboxItem defaultSelected={setting.value === Bool.True} onToggle={onToggle}>\n      {setting.label}\n    </CheckboxItem>\n  );\n};\n\nconst SettingList: React.FC<{ setting: DeviceSettingList; onSelect?: Function }> = ({ setting, onSelect }) => {\n  return (\n    <ExpandableList\n      // @ts-expect-error\n      defaultSelected={findIndex(setting.value, (value) => value.selected === Bool.True)}\n      title={setting.label}\n      select=\"radio\"\n      onSelect={onSelect}\n      closeOnSelect\n    >\n      {map(setting.value, (value) => `${value.label} ${value.description ? `(${value.description})` : ''}`) as string[]}\n    </ExpandableList>\n  );\n};\n\nconst SettingsView: React.FC = () => {\n  const { data } = useApi('user');\n  const { data: deviceInfo } = useApi('deviceInfo');\n  const { saveDeviceSettingsAsync } = useApiMutation('saveDeviceSettings');\n  const { deactivate } = useApiMutation('deactivate');\n  const [newSettings, setNewSettings] = useState<DeviceSettingsParams>({});\n\n  const boolSettings = useMemo(\n    () =>\n      filter(\n        map(deviceInfo?.device?.settings, (setting, key) => ({ ...setting, key })),\n        (setting: DeviceSettingBoolean) => typeof setting['type'] === 'undefined',\n      ) as (DeviceSettingBoolean & { key: string })[],\n    [deviceInfo?.device?.settings],\n  );\n  const listSettings = useMemo(\n    () =>\n      filter(\n        map(deviceInfo?.device?.settings, (setting, key) => ({ ...setting, key })),\n        (setting: DeviceSettingList) => setting['type'] === 'list',\n      ) as (DeviceSettingList & { key: string })[],\n    [deviceInfo?.device?.settings],\n  );\n\n  const handleBoolSettingToggle = useCallback(\n    (setting: typeof boolSettings[0]) => async ({ selected }: { selected: boolean }) => {\n      setNewSettings({ ...newSettings, [setting['key']]: selected });\n    },\n    [newSettings],\n  );\n  const handleListSettingSelect = useCallback(\n    (setting: typeof listSettings[0]) => ({ selected }: { selected: number }) => {\n      setNewSettings({ ...newSettings, [setting['key']]: setting.value[selected].id });\n    },\n    [newSettings],\n  );\n\n  const handleSaveClick = useCallback(async () => {\n    await saveDeviceSettingsAsync([deviceInfo?.device.id!, newSettings]);\n\n    window.location.reload();\n  }, [newSettings, deviceInfo?.device, saveDeviceSettingsAsync]);\n  const handleLogoutClick = useCallback(() => {\n    deactivate([]);\n  }, [deactivate]);\n\n  return (\n    <>\n      <Text>Настройки устройства</Text>\n\n      <Content>\n        {deviceInfo?.device && (\n          <>\n            <div>\n              <Settings key={`bool-${deviceInfo?.device.updated}`}>\n                {map(boolSettings, (setting) => (\n                  <Setting key={setting['key']}>\n                    <SettingBool setting={setting} onToggle={handleBoolSettingToggle(setting)} />\n                  </Setting>\n                ))}\n              </Settings>\n              <Settings key={`list-${deviceInfo?.device.updated}`}>\n                {map(listSettings, (setting) => (\n                  <Setting key={setting['key']}>\n                    <SettingList setting={setting} onSelect={handleListSettingSelect(setting)} />\n                  </Setting>\n                ))}\n              </Settings>\n            </div>\n\n            <div>\n              <Button icon=\"done\" onClick={handleSaveClick}>\n                Сохранить\n              </Button>\n            </div>\n          </>\n        )}\n\n        <div>\n          <Text>Пользователь</Text>\n\n          <User>\n            {data?.user && (\n              <Text>\n                {data.user.profile.name || data.user.username} ({Math.floor(data.user.subscription.days)} дн.)\n              </Text>\n            )}\n\n            <Button icon=\"logout\" onClick={handleLogoutClick}>\n              Выход\n            </Button>\n          </User>\n        </div>\n      </Content>\n    </>\n  );\n};\n\nexport default SettingsView;\n"],"sourceRoot":""}