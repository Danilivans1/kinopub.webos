{"version":3,"sources":["components/collectionItem/collectionItem.tsx","components/collectionsList/collectionsList.tsx","containers/collectionsListInfinite/collectionsListInfinite.tsx","views/collections/collections.tsx","components/seo/seo.tsx","hooks/useInViewport.ts","components/scrollable/scrollable.tsx","components/title/title.tsx","components/imageItem/imageItem.tsx","hooks/useInfiniteItems.ts","hooks/useApiInfinite.ts","components/input/input.tsx"],"names":["CollectionItem","collection","className","history","useHistory","handleOnClick","useCallback","id","push","generatePath","PATHS","Collection","collectionId","title","onClick","source","posters","medium","caption","cx","CollectionsList","collections","loading","onScrollToEnd","scrollable","content","map","Array","_","idx","CollectionsListInfinite","queryResult","processItems","useInfiniteItems","items","isLoading","fetchMore","CollectionsView","useState","query","setQuery","useApiInfinite","handleQueryChange","value","placeholder","onChange","Seo","props","Helmet","defaultTitle","titleTemplate","useInViewport","target","options","config","disconnectOnLeave","onEnterViewport","onLeaveViewport","forceUpdate","observer","useRef","inViewportRef","intersected","enterCountRef","leaveCountRef","startObserver","current","node","findDOMNode","observe","stopObserver","unobserve","disconnect","handleIntersection","entries","entry","isIntersecting","intersectionRatio","isInViewport","initIntersectionObserver","IntersectionObserver","useEffect","inViewport","enterCount","leaveCount","Scrollable","children","footerRef","ref","Title","ImageItem","wrapperClassName","src","alt","data","isFetchingNextPage","fetchNextPage","canFetchNextPage","setCanFetchNextPage","useMemo","uniqBy","filter","flatMap","pages","page","processedItems","handleLoadMore","length","method","params","client","ApiClient","useInfiniteQuery","pageParam","getNextPageParam","lastPage","pagination","Input","autoFocus","inputRef","handleChange","frameId","requestAnimationFrame","domNode","querySelector","focus","cancelAnimationFrame"],"mappings":"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","file":"static/js/27.6b6e1340.chunk.js","sourcesContent":["import { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport cx from 'classnames';\n\nimport { Collection } from 'api';\nimport ImageItem from 'components/imageItem';\nimport { PATHS, generatePath } from 'routes';\n\ntype Props = {\n  collection?: Collection;\n  className?: string;\n};\n\nconst CollectionItem: React.FC<Props> = ({ collection, className }) => {\n  const history = useHistory();\n  const handleOnClick = useCallback(() => {\n    if (collection?.id) {\n      history.push(\n        generatePath(PATHS.Collection, {\n          collectionId: collection.id,\n        }),\n        {\n          collection,\n          title: collection.title,\n        },\n      );\n    }\n  }, [collection, history]);\n\n  return (\n    <ImageItem onClick={handleOnClick} source={collection?.posters.medium} caption={collection?.title} className={cx('h-72', className)} />\n  );\n};\n\nexport default CollectionItem;\n","import React from 'react';\nimport map from 'lodash/map';\n\nimport { Collection } from 'api';\nimport CollectionItem from 'components/collectionItem';\nimport Scrollable from 'components/scrollable';\nimport Title from 'components/title';\n\ntype Props = {\n  title?: string;\n  collections?: Collection[];\n  loading?: boolean;\n  onScrollToEnd?: () => void;\n  scrollable?: boolean;\n};\n\nconst CollectionsList: React.FC<Props> = ({ title, collections, loading, onScrollToEnd, scrollable = true }) => {\n  const content = (\n    <div>\n      <Title title={title} />\n      <div className=\"flex flex-wrap pr-2\">\n        {map(collections, (collection) => (\n          <CollectionItem key={collection.id} collection={collection} />\n        ))}\n        {loading && map([...new Array(15)], (_, idx) => <CollectionItem key={idx} />)}\n      </div>\n    </div>\n  );\n\n  return scrollable ? <Scrollable onScrollToEnd={onScrollToEnd}>{content}</Scrollable> : content;\n};\n\nexport default CollectionsList;\n","import { Collection } from 'api';\nimport CollectionsList from 'components/collectionsList';\nimport useInfiniteItems, { QueryResult } from 'hooks/useInfiniteItems';\n\ntype Props = {\n  queryResult: QueryResult;\n  processItems?: (items: Collection[]) => Collection[];\n};\n\nconst CollectionsListInfinite: React.FC<Props> = ({ queryResult, processItems }) => {\n  const [items, isLoading, fetchMore] = useInfiniteItems(queryResult, processItems);\n\n  return <CollectionsList collections={items} loading={isLoading} onScrollToEnd={fetchMore} />;\n};\n\nexport default CollectionsListInfinite;\n","import React, { useCallback, useState } from 'react';\n\nimport Input from 'components/input';\nimport Seo from 'components/seo';\nimport CollectionsListInfinite from 'containers/collectionsListInfinite';\nimport useApiInfinite from 'hooks/useApiInfinite';\n\nconst CollectionsView: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const queryResult = useApiInfinite('collections', [query, 'watchers-']);\n\n  const handleQueryChange = useCallback(\n    (value) => {\n      setQuery(value);\n    },\n    [setQuery],\n  );\n\n  return (\n    <>\n      <Seo title=\"Подборки\" />\n      <div className=\"m-1 mb-3 mr-2\">\n        <Input placeholder=\"Название подборки...\" value={query} onChange={handleQueryChange} />\n      </div>\n      <CollectionsListInfinite queryResult={queryResult} />\n    </>\n  );\n};\n\nexport default CollectionsView;\n","import { Helmet, HelmetProps } from 'react-helmet';\n\ntype Props = {} & HelmetProps;\n\nconst Seo: React.FC<Props> = (props) => {\n  return <Helmet defaultTitle=\"Unknown\" titleTemplate=\"%s | Kinopub WebOS\" {...props} />;\n};\n\nexport default Seo;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { findDOMNode } from 'react-dom';\n\ntype Props = {\n  onEnterViewport?: () => void;\n  onLeaveViewport?: () => void;\n};\n\nconst useInViewport = (\n  target: React.MutableRefObject<React.ReactInstance | null | undefined>,\n  props: Props,\n  options?: IntersectionObserverInit,\n  config = { disconnectOnLeave: false },\n) => {\n  const { onEnterViewport, onLeaveViewport } = props;\n  const [, forceUpdate] = useState();\n\n  const observer = useRef<IntersectionObserver | null>(null);\n\n  const inViewportRef = useRef(false);\n  const intersected = useRef(false);\n\n  const enterCountRef = useRef(0);\n  const leaveCountRef = useRef(0);\n\n  const startObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.observe(node);\n      }\n    }\n  }, [target, observer]);\n\n  const stopObserver = useCallback(() => {\n    if (target.current && observer.current) {\n      const node = findDOMNode(target.current) as Element;\n      if (node) {\n        observer.current.unobserve(node);\n        observer.current.disconnect();\n        observer.current = null;\n      }\n    }\n  }, [target, observer]);\n\n  const handleIntersection = useCallback(\n    (entries) => {\n      const entry = entries[0] || {};\n      const { isIntersecting, intersectionRatio } = entry;\n      const isInViewport = typeof isIntersecting !== 'undefined' ? isIntersecting : intersectionRatio > 0;\n\n      // enter\n      if (!intersected.current && isInViewport) {\n        intersected.current = true;\n\n        onEnterViewport?.();\n\n        enterCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n\n        return;\n      }\n\n      // leave\n      if (intersected.current && !isInViewport) {\n        intersected.current = false;\n\n        onLeaveViewport?.();\n\n        if (config.disconnectOnLeave && observer.current) {\n          // disconnect obsever on leave\n          observer.current.disconnect();\n        }\n\n        leaveCountRef.current += 1;\n        inViewportRef.current = isInViewport;\n\n        forceUpdate(isInViewport);\n      }\n    },\n    [observer, config.disconnectOnLeave, onEnterViewport, onLeaveViewport],\n  );\n\n  const initIntersectionObserver = useCallback(() => {\n    if (!observer.current) {\n      observer.current = new IntersectionObserver(handleIntersection, options);\n    }\n  }, [observer, options, handleIntersection]);\n\n  useEffect(() => {\n    initIntersectionObserver();\n    startObserver();\n\n    return () => {\n      stopObserver();\n    };\n  }, [initIntersectionObserver, startObserver, stopObserver]);\n\n  return {\n    inViewport: inViewportRef.current,\n    enterCount: enterCountRef.current,\n    leaveCount: leaveCountRef.current,\n  };\n};\n\nexport default useInViewport;\n","import { useRef } from 'react';\nimport cx from 'classnames';\n\nimport useInViewport from 'hooks/useInViewport';\n\ntype Props = {\n  onScrollToEnd?: () => void;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst Scrollable: React.FC<Props> = ({ children, className, onScrollToEnd, ...props }) => {\n  const footerRef = useRef<HTMLDivElement>(null);\n\n  useInViewport(footerRef, { onEnterViewport: onScrollToEnd });\n\n  return (\n    <div className={cx('overflow-y-auto h-full', className)} {...props}>\n      {children}\n      <div className=\"h-40\" ref={footerRef} />\n    </div>\n  );\n};\n\nexport default Scrollable;\n","import cx from 'classnames';\n\nimport Text from 'components/text';\n\ntype Props = {\n  title?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst Title: React.FC<Props> = ({ title, className, ...props }) => {\n  if (!title) {\n    return null;\n  }\n\n  return (\n    <Text {...props} className={cx('m-1 mb-3', className)}>\n      {title}\n    </Text>\n  );\n};\n\nexport default Title;\n","import cx from 'classnames';\n\nimport Spottable from 'components/spottable';\n\ntype Props = {\n  className?: string;\n  wrapperClassName?: string;\n  source?: string;\n  caption?: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst ImageItem: React.FC<Props> = ({ className, wrapperClassName, source, caption, children, ...props }) => {\n  return (\n    <Spottable {...props} className={cx('rounded-xl w-1/5', wrapperClassName)}>\n      <div className={cx('h-40 m-1 flex flex-col relative overflow-hidden cursor-pointer', className)}>\n        <img\n          loading=\"lazy\"\n          className=\"w-full h-full object-cover rounded-xl border-2 border-gray-300 bg-gray-300\"\n          src={source}\n          alt={caption}\n        />\n        <div className=\"px-2\">\n          <p className=\"text-gray-200 text-sm text-center overflow-hidden whitespace-nowrap\">{caption}</p>\n        </div>\n\n        {children}\n      </div>\n    </Spottable>\n  );\n};\n\nexport default ImageItem;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport filter from 'lodash/filter';\nimport flatMap from 'lodash/flatMap';\nimport uniqBy from 'lodash/uniqBy';\n\nimport useApiInfinite from 'hooks/useApiInfinite';\n\ntype PageWithItems<T> = {\n  items: T[];\n};\n\nexport type QueryResult = ReturnType<typeof useApiInfinite>;\n\nfunction useInfiniteItems<T>(queryResult: QueryResult, processItems?: (items: T[]) => T[]) {\n  const { data, isLoading, isFetchingNextPage, fetchNextPage } = queryResult;\n  const [canFetchNextPage, setCanFetchNextPage] = useState(false);\n\n  const items = useMemo(\n    () => uniqBy(filter(flatMap<PageWithItems<T>, T>(data?.pages as unknown as PageWithItems<T>[], (page) => page.items)), 'id'),\n    [data?.pages],\n  );\n  const processedItems = useMemo(() => (processItems ? processItems(items) : items), [items, processItems]);\n\n  const handleLoadMore = useCallback(() => {\n    if (canFetchNextPage) {\n      fetchNextPage();\n      setCanFetchNextPage(false);\n    }\n  }, [canFetchNextPage, fetchNextPage]);\n\n  useEffect(() => {\n    setCanFetchNextPage(true);\n  }, [items.length]);\n\n  return [processedItems, isLoading || isFetchingNextPage, handleLoadMore] as const;\n}\n\nexport default useInfiniteItems;\n","import { useMemo } from 'react';\nimport { UseInfiniteQueryOptions, useInfiniteQuery } from 'react-query';\n\nimport ApiClient, { PaginationResponse } from 'api';\n\nimport { Method, Methods } from './useApi';\n\nfunction useApiInfinite<T extends Method>(\n  method: T,\n  params: Parameters<ApiClient[T]> = [] as Parameters<ApiClient[T]>,\n  options?: UseInfiniteQueryOptions<Methods[T]>,\n) {\n  const client = useMemo(() => new ApiClient(), []);\n  const query = useInfiniteQuery<Methods[T], string, Methods[T]>(\n    [method, ...params],\n    ({ pageParam }) => {\n      // @ts-expect-error\n      return client[method](...params, pageParam) as Methods[T];\n    },\n    {\n      // @ts-expect-error\n      getNextPageParam: (lastPage: PaginationResponse) => {\n        return lastPage?.pagination?.current + 1 || 1;\n      },\n      ...options,\n    },\n  );\n\n  return query;\n}\n\nexport default useApiInfinite;\n","import { useCallback, useEffect, useRef } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport InputBase, { InputProps } from '@enact/moonstone/Input';\nimport cx from 'classnames';\n\ntype Props = {\n  onChange?: (value: string) => void;\n  className?: string;\n} & InputProps;\n\nconst Input: React.FC<Props> = ({ className, onChange, autoFocus, ...props }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const handleChange = useCallback(\n    ({ value }: { value: string }) => {\n      onChange?.(value);\n    },\n    [onChange],\n  );\n\n  useEffect(() => {\n    let frameId: number;\n\n    if (autoFocus) {\n      frameId = requestAnimationFrame(() => {\n        const domNode = findDOMNode(inputRef.current) as HTMLDivElement;\n        domNode?.querySelector('input')?.focus();\n      });\n    }\n\n    return () => {\n      if (frameId) {\n        cancelAnimationFrame(frameId);\n      }\n    };\n  }, [inputRef, autoFocus]);\n\n  return (\n    <InputBase\n      {...props}\n      // @ts-expect-error\n      ref={inputRef}\n      className={cx('w-full', className)}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default Input;\n"],"sourceRoot":""}